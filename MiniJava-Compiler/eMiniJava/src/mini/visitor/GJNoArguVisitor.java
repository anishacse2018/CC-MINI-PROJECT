//
// Generated by JTB 1.3.2
//

package mini.visitor;
import mini.syntaxtree.*;
import java.util.*;

/**
 * All GJ visitors with no argument must implement this interface.
 */

public @SuppressWarnings("all") interface GJNoArguVisitor<R> {

   //
   // GJ Auto class visitors with no argument
   //

   public R visit(NodeList n);
   public R visit(NodeListOptional n);
   public R visit(NodeOptional n);
   public R visit(NodeSequence n);
   public R visit(NodeToken n);

   //
   // User-generated visitor methods below
   //

   /**
    * mainClass -> MainClass()
    * nodeListOptional -> ( ClassDecl() )*
    * nodeOptional -> ( DrawClass() )?
    * nodeListOptional1 -> ( ClassDecl() )*
    * nodeToken -> <EOF>
    */
   public R visit(Program n);

   /**
    * nodeToken -> "class"
    * identifier -> Identifier()
    * nodeToken1 -> "{"
    * nodeToken2 -> "public"
    * nodeToken3 -> "static"
    * nodeToken4 -> "void"
    * nodeToken5 -> "main"
    * nodeToken6 -> "("
    * nodeToken7 -> "String"
    * nodeToken8 -> "["
    * nodeToken9 -> "]"
    * identifier1 -> Identifier()
    * nodeToken10 -> ")"
    * nodeToken11 -> "{"
    * ioStatement -> IoStatement()
    * nodeToken12 -> "}"
    * nodeToken13 -> "}"
    */
   public R visit(MainClass n);

   /**
    * nodeToken -> "class"
    * identifier -> Identifier()
    * nodeToken1 -> "extends"
    * nodeToken2 -> "MiniDraw"
    * nodeToken3 -> "{"
    * nodeListOptional -> ( VarDecl() )*
    * nodeListOptional1 -> ( MethodDecl() )*
    * messageHandler -> MessageHandler()
    * nodeListOptional2 -> ( MethodDecl() )*
    * nodeToken4 -> "}"
    */
   public R visit(DrawClass n);

   /**
    * nodeToken -> "public"
    * nodeToken1 -> "final"
    * nodeToken2 -> "int"
    * nodeToken3 -> "MessageHandler"
    * nodeToken4 -> "("
    * arrayType -> ArrayType()
    * identifier -> Identifier()
    * nodeToken5 -> ","
    * integerType -> IntegerType()
    * identifier1 -> Identifier()
    * nodeToken6 -> ")"
    * nodeToken7 -> "{"
    * nodeListOptional -> ( VarDecl() )*
    * nodeListOptional1 -> ( Statement() )*
    * nodeToken8 -> "return"
    * exp -> Exp()
    * nodeToken9 -> ";"
    * nodeToken10 -> "}"
    */
   public R visit(MessageHandler n);

   /**
    * nodeChoice -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(ClassDecl n);

   /**
    * nodeToken -> "class"
    * identifier -> Identifier()
    * nodeToken1 -> "{"
    * nodeListOptional -> ( VarDecl() )*
    * nodeListOptional1 -> ( MethodDecl() )*
    * nodeToken2 -> "}"
    */
   public R visit(ClassDeclaration n);

   /**
    * nodeToken -> "class"
    * identifier -> Identifier()
    * nodeToken1 -> "extends"
    * identifier1 -> Identifier()
    * nodeToken2 -> "{"
    * nodeListOptional -> ( VarDecl() )*
    * nodeListOptional1 -> ( MethodDecl() )*
    * nodeToken3 -> "}"
    */
   public R visit(ClassExtendsDeclaration n);

   /**
    * type -> Type()
    * identifier -> Identifier()
    * nodeToken -> ";"
    */
   public R visit(VarDecl n);

   /**
    * nodeToken -> "public"
    * type -> Type()
    * identifier -> Identifier()
    * nodeToken1 -> "("
    * nodeOptional -> ( FormalList() )?
    * nodeToken2 -> ")"
    * nodeToken3 -> "{"
    * nodeListOptional -> ( VarDecl() )*
    * nodeListOptional1 -> ( Statement() )*
    * nodeToken4 -> "return"
    * exp -> Exp()
    * nodeToken5 -> ";"
    * nodeToken6 -> "}"
    */
   public R visit(MethodDecl n);

   /**
    * formalParameter -> FormalParameter()
    * nodeListOptional -> ( FormalRest() )*
    */
   public R visit(FormalList n);

   /**
    * type -> Type()
    * identifier -> Identifier()
    */
   public R visit(FormalParameter n);

   /**
    * nodeToken -> ","
    * formalParameter -> FormalParameter()
    */
   public R visit(FormalRest n);

   /**
    * nodeChoice -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n);

   /**
    * nodeToken -> "int"
    * nodeToken1 -> "["
    * nodeToken2 -> "]"
    */
   public R visit(ArrayType n);

   /**
    * nodeToken -> "boolean"
    */
   public R visit(BooleanType n);

   /**
    * nodeToken -> "int"
    */
   public R visit(IntegerType n);

   /**
    * nodeChoice -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | ExpStatement()
    *       | IoStatement()
    *       | GuiStatement()
    */
   public R visit(Statement n);

   /**
    * exp -> Exp()
    * nodeToken -> ";"
    */
   public R visit(ExpStatement n);

   /**
    * nodeToken -> "{"
    * nodeListOptional -> ( Statement() )*
    * nodeToken1 -> "}"
    */
   public R visit(Block n);

   /**
    * identifier -> Identifier()
    * nodeToken -> "="
    * exp -> Exp()
    * nodeToken1 -> ";"
    */
   public R visit(AssignmentStatement n);

   /**
    * identifier -> Identifier()
    * nodeToken -> "["
    * exp -> Exp()
    * nodeToken1 -> "]"
    * nodeToken2 -> "="
    * exp1 -> Exp()
    * nodeToken3 -> ";"
    */
   public R visit(ArrayAssignmentStatement n);

   /**
    * nodeToken -> "if"
    * nodeToken1 -> "("
    * exp -> Exp()
    * nodeToken2 -> ")"
    * statement -> Statement()
    * nodeOptional -> [ ElseStatement() ]
    */
   public R visit(IfStatement n);

   /**
    * nodeToken -> "else"
    * statement -> Statement()
    */
   public R visit(ElseStatement n);

   /**
    * nodeToken -> "while"
    * nodeToken1 -> "("
    * exp -> Exp()
    * nodeToken2 -> ")"
    * statement -> Statement()
    */
   public R visit(WhileStatement n);

   /**
    * nodeChoice -> Println()
    *       | Print()
    *       | Read()
    */
   public R visit(IoStatement n);

   /**
    * nodeToken -> "System.out.println"
    * nodeToken1 -> "("
    * exp -> Exp()
    * nodeToken2 -> ")"
    * nodeToken3 -> ";"
    */
   public R visit(Println n);

   /**
    * nodeToken -> "Minijava.print"
    * nodeToken1 -> "("
    * exp -> Exp()
    * nodeToken2 -> ")"
    * nodeToken3 -> ";"
    */
   public R visit(Print n);

   /**
    * nodeToken -> "Minijava.scanf"
    * nodeToken1 -> "("
    * identifier -> Identifier()
    * nodeToken2 -> ")"
    * nodeToken3 -> ";"
    */
   public R visit(Read n);

   /**
    * nodeChoice -> Window()
    *       | Wait()
    *       | GetKeyState()
    *       | Color()
    *       | Bitblt()
    *       | Present()
    *       | Srand()
    *       | Rand()
    */
   public R visit(GuiStatement n);

   /**
    * nodeToken -> "Minijava.present"
    * nodeToken1 -> "("
    * exp -> Exp()
    * nodeToken2 -> ","
    * exp1 -> Exp()
    * nodeToken3 -> ")"
    * nodeToken4 -> ";"
    */
   public R visit(Present n);

   /**
    * nodeToken -> "Minijava.srand"
    * nodeToken1 -> "("
    * exp -> Exp()
    * nodeToken2 -> ")"
    * nodeToken3 -> ";"
    */
   public R visit(Srand n);

   /**
    * nodeToken -> "Minijava.rand"
    * nodeToken1 -> "("
    * identifier -> Identifier()
    * nodeToken2 -> ")"
    * nodeToken3 -> ";"
    */
   public R visit(Rand n);

   /**
    * nodeToken -> "Minijava.window"
    * nodeToken1 -> "("
    * exp -> Exp()
    * nodeToken2 -> ","
    * exp1 -> Exp()
    * nodeToken3 -> ","
    * exp2 -> Exp()
    * nodeToken4 -> ","
    * exp3 -> Exp()
    * nodeToken5 -> ")"
    * nodeToken6 -> ";"
    */
   public R visit(Window n);

   /**
    * nodeToken -> "Minijava.wait"
    * nodeToken1 -> "("
    * exp -> Exp()
    * nodeToken2 -> ")"
    * nodeToken3 -> ";"
    */
   public R visit(Wait n);

   /**
    * nodeToken -> "Minijava.getkey"
    * nodeToken1 -> "("
    * exp -> Exp()
    * nodeToken2 -> ","
    * identifier -> Identifier()
    * nodeToken3 -> ")"
    * nodeToken4 -> ";"
    */
   public R visit(GetKeyState n);

   /**
    * nodeToken -> "Minijava.color"
    * nodeToken1 -> "("
    * exp -> Exp()
    * nodeToken2 -> ","
    * exp1 -> Exp()
    * nodeToken3 -> ","
    * exp2 -> Exp()
    * nodeToken4 -> ","
    * exp3 -> Exp()
    * nodeToken5 -> ","
    * identifier -> Identifier()
    * nodeToken6 -> ")"
    * nodeToken7 -> ";"
    */
   public R visit(Color n);

   /**
    * nodeToken -> "Minijava.bitblt"
    * nodeToken1 -> "("
    * exp -> Exp()
    * nodeToken2 -> ","
    * exp1 -> Exp()
    * nodeToken3 -> ","
    * exp2 -> Exp()
    * nodeToken4 -> ","
    * exp3 -> Exp()
    * nodeToken5 -> ","
    * exp4 -> Exp()
    * nodeToken6 -> ")"
    * nodeToken7 -> ";"
    */
   public R visit(Bitblt n);

   /**
    * nodeChoice -> AndExpression()
    *       | OrExpression()
    *       | CompareExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ModExpression()
    *       | CompareBigExpression()
    *       | CompareEquExpression()
    *       | CompareNotEquExpression()
    *       | CompareBigEquExpression()
    *       | CompareSmallEquExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Exp n);

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "/"
    * primaryExpression1 -> PrimaryExpression()
    */
   public R visit(DivExpression n);

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "%"
    * primaryExpression1 -> PrimaryExpression()
    */
   public R visit(ModExpression n);

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> ">"
    * primaryExpression1 -> PrimaryExpression()
    */
   public R visit(CompareBigExpression n);

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "=="
    * primaryExpression1 -> PrimaryExpression()
    */
   public R visit(CompareEquExpression n);

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "!="
    * primaryExpression1 -> PrimaryExpression()
    */
   public R visit(CompareNotEquExpression n);

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> ">="
    * primaryExpression1 -> PrimaryExpression()
    */
   public R visit(CompareBigEquExpression n);

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "<="
    * primaryExpression1 -> PrimaryExpression()
    */
   public R visit(CompareSmallEquExpression n);

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "||"
    * primaryExpression1 -> PrimaryExpression()
    */
   public R visit(OrExpression n);

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "&&"
    * primaryExpression1 -> PrimaryExpression()
    */
   public R visit(AndExpression n);

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "<"
    * primaryExpression1 -> PrimaryExpression()
    */
   public R visit(CompareExpression n);

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "+"
    * primaryExpression1 -> PrimaryExpression()
    */
   public R visit(PlusExpression n);

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "-"
    * primaryExpression1 -> PrimaryExpression()
    */
   public R visit(MinusExpression n);

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "*"
    * primaryExpression1 -> PrimaryExpression()
    */
   public R visit(TimesExpression n);

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "["
    * primaryExpression1 -> PrimaryExpression()
    * nodeToken1 -> "]"
    */
   public R visit(ArrayLookup n);

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "."
    * nodeToken1 -> "length"
    */
   public R visit(ArrayLength n);

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "."
    * identifier -> Identifier()
    * nodeToken1 -> "("
    * nodeOptional -> ( ExpList() )?
    * nodeToken2 -> ")"
    */
   public R visit(MessageSend n);

   /**
    * exp -> Exp()
    * nodeListOptional -> ( ExpRest() )*
    */
   public R visit(ExpList n);

   /**
    * nodeToken -> ","
    * exp -> Exp()
    */
   public R visit(ExpRest n);

   /**
    * nodeChoice -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    *       | CharLiteral()
    */
   public R visit(PrimaryExpression n);

   /**
    * nodeToken -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n);

   /**
    * nodeToken -> <CHAR_LITERAL>
    */
   public R visit(CharLiteral n);

   /**
    * nodeToken -> "true"
    */
   public R visit(TrueLiteral n);

   /**
    * nodeToken -> "false"
    */
   public R visit(FalseLiteral n);

   /**
    * nodeToken -> <IDENTIFIER>
    */
   public R visit(Identifier n);

   /**
    * nodeToken -> "this"
    */
   public R visit(ThisExpression n);

   /**
    * nodeToken -> "new"
    * nodeToken1 -> "int"
    * nodeToken2 -> "["
    * exp -> Exp()
    * nodeToken3 -> "]"
    */
   public R visit(ArrayAllocationExpression n);

   /**
    * nodeToken -> "new"
    * identifier -> Identifier()
    * nodeToken1 -> "("
    * nodeToken2 -> ")"
    */
   public R visit(AllocationExpression n);

   /**
    * nodeToken -> "!"
    * exp -> Exp()
    */
   public R visit(NotExpression n);

   /**
    * nodeToken -> "("
    * exp -> Exp()
    * nodeToken1 -> ")"
    */
   public R visit(BracketExpression n);

}


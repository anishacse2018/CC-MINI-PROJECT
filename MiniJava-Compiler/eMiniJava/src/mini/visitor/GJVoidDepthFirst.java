//
// Generated by JTB 1.3.2
//

package mini.visitor;
import mini.syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public @SuppressWarnings("all") class GJVoidDepthFirst<A> implements GJVoidVisitor<A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public void visit(NodeList n, A argu) {
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
   }

   public void visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
      }
   }

   public void visit(NodeOptional n, A argu) {
      if ( n.present() )
         n.node.accept(this,argu);
   }

   public void visit(NodeSequence n, A argu) {
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
   }

   public void visit(NodeToken n, A argu) {}

   //
   // User-generated visitor methods below
   //

   /**
    * mainClass -> MainClass()
    * nodeListOptional -> ( ClassDecl() )*
    * nodeOptional -> ( DrawClass() )?
    * nodeListOptional1 -> ( ClassDecl() )*
    * nodeToken -> <EOF>
    */
   public void visit(Program n, A argu) {
      n.mainClass.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
      n.nodeOptional.accept(this, argu);
      n.nodeListOptional1.accept(this, argu);
      n.nodeToken.accept(this, argu);
   }

   /**
    * nodeToken -> "class"
    * identifier -> Identifier()
    * nodeToken1 -> "{"
    * nodeToken2 -> "public"
    * nodeToken3 -> "static"
    * nodeToken4 -> "void"
    * nodeToken5 -> "main"
    * nodeToken6 -> "("
    * nodeToken7 -> "String"
    * nodeToken8 -> "["
    * nodeToken9 -> "]"
    * identifier1 -> Identifier()
    * nodeToken10 -> ")"
    * nodeToken11 -> "{"
    * ioStatement -> IoStatement()
    * nodeToken12 -> "}"
    * nodeToken13 -> "}"
    */
   public void visit(MainClass n, A argu) {
      n.nodeToken.accept(this, argu);
      n.identifier.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.nodeToken3.accept(this, argu);
      n.nodeToken4.accept(this, argu);
      n.nodeToken5.accept(this, argu);
      n.nodeToken6.accept(this, argu);
      n.nodeToken7.accept(this, argu);
      n.nodeToken8.accept(this, argu);
      n.nodeToken9.accept(this, argu);
      n.identifier1.accept(this, argu);
      n.nodeToken10.accept(this, argu);
      n.nodeToken11.accept(this, argu);
      n.ioStatement.accept(this, argu);
      n.nodeToken12.accept(this, argu);
      n.nodeToken13.accept(this, argu);
   }

   /**
    * nodeToken -> "class"
    * identifier -> Identifier()
    * nodeToken1 -> "extends"
    * nodeToken2 -> "MiniDraw"
    * nodeToken3 -> "{"
    * nodeListOptional -> ( VarDecl() )*
    * nodeListOptional1 -> ( MethodDecl() )*
    * messageHandler -> MessageHandler()
    * nodeListOptional2 -> ( MethodDecl() )*
    * nodeToken4 -> "}"
    */
   public void visit(DrawClass n, A argu) {
      n.nodeToken.accept(this, argu);
      n.identifier.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.nodeToken3.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
      n.nodeListOptional1.accept(this, argu);
      n.messageHandler.accept(this, argu);
      n.nodeListOptional2.accept(this, argu);
      n.nodeToken4.accept(this, argu);
   }

   /**
    * nodeToken -> "public"
    * nodeToken1 -> "final"
    * nodeToken2 -> "int"
    * nodeToken3 -> "MessageHandler"
    * nodeToken4 -> "("
    * arrayType -> ArrayType()
    * identifier -> Identifier()
    * nodeToken5 -> ","
    * integerType -> IntegerType()
    * identifier1 -> Identifier()
    * nodeToken6 -> ")"
    * nodeToken7 -> "{"
    * nodeListOptional -> ( VarDecl() )*
    * nodeListOptional1 -> ( Statement() )*
    * nodeToken8 -> "return"
    * exp -> Exp()
    * nodeToken9 -> ";"
    * nodeToken10 -> "}"
    */
   public void visit(MessageHandler n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.nodeToken3.accept(this, argu);
      n.nodeToken4.accept(this, argu);
      n.arrayType.accept(this, argu);
      n.identifier.accept(this, argu);
      n.nodeToken5.accept(this, argu);
      n.integerType.accept(this, argu);
      n.identifier1.accept(this, argu);
      n.nodeToken6.accept(this, argu);
      n.nodeToken7.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
      n.nodeListOptional1.accept(this, argu);
      n.nodeToken8.accept(this, argu);
      n.exp.accept(this, argu);
      n.nodeToken9.accept(this, argu);
      n.nodeToken10.accept(this, argu);
   }

   /**
    * nodeChoice -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public void visit(ClassDecl n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   /**
    * nodeToken -> "class"
    * identifier -> Identifier()
    * nodeToken1 -> "{"
    * nodeListOptional -> ( VarDecl() )*
    * nodeListOptional1 -> ( MethodDecl() )*
    * nodeToken2 -> "}"
    */
   public void visit(ClassDeclaration n, A argu) {
      n.nodeToken.accept(this, argu);
      n.identifier.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
      n.nodeListOptional1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
   }

   /**
    * nodeToken -> "class"
    * identifier -> Identifier()
    * nodeToken1 -> "extends"
    * identifier1 -> Identifier()
    * nodeToken2 -> "{"
    * nodeListOptional -> ( VarDecl() )*
    * nodeListOptional1 -> ( MethodDecl() )*
    * nodeToken3 -> "}"
    */
   public void visit(ClassExtendsDeclaration n, A argu) {
      n.nodeToken.accept(this, argu);
      n.identifier.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.identifier1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
      n.nodeListOptional1.accept(this, argu);
      n.nodeToken3.accept(this, argu);
   }

   /**
    * type -> Type()
    * identifier -> Identifier()
    * nodeToken -> ";"
    */
   public void visit(VarDecl n, A argu) {
      n.type.accept(this, argu);
      n.identifier.accept(this, argu);
      n.nodeToken.accept(this, argu);
   }

   /**
    * nodeToken -> "public"
    * type -> Type()
    * identifier -> Identifier()
    * nodeToken1 -> "("
    * nodeOptional -> ( FormalList() )?
    * nodeToken2 -> ")"
    * nodeToken3 -> "{"
    * nodeListOptional -> ( VarDecl() )*
    * nodeListOptional1 -> ( Statement() )*
    * nodeToken4 -> "return"
    * exp -> Exp()
    * nodeToken5 -> ";"
    * nodeToken6 -> "}"
    */
   public void visit(MethodDecl n, A argu) {
      n.nodeToken.accept(this, argu);
      n.type.accept(this, argu);
      n.identifier.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeOptional.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.nodeToken3.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
      n.nodeListOptional1.accept(this, argu);
      n.nodeToken4.accept(this, argu);
      n.exp.accept(this, argu);
      n.nodeToken5.accept(this, argu);
      n.nodeToken6.accept(this, argu);
   }

   /**
    * formalParameter -> FormalParameter()
    * nodeListOptional -> ( FormalRest() )*
    */
   public void visit(FormalList n, A argu) {
      n.formalParameter.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
   }

   /**
    * type -> Type()
    * identifier -> Identifier()
    */
   public void visit(FormalParameter n, A argu) {
      n.type.accept(this, argu);
      n.identifier.accept(this, argu);
   }

   /**
    * nodeToken -> ","
    * formalParameter -> FormalParameter()
    */
   public void visit(FormalRest n, A argu) {
      n.nodeToken.accept(this, argu);
      n.formalParameter.accept(this, argu);
   }

   /**
    * nodeChoice -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public void visit(Type n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   /**
    * nodeToken -> "int"
    * nodeToken1 -> "["
    * nodeToken2 -> "]"
    */
   public void visit(ArrayType n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
   }

   /**
    * nodeToken -> "boolean"
    */
   public void visit(BooleanType n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   /**
    * nodeToken -> "int"
    */
   public void visit(IntegerType n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   /**
    * nodeChoice -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | ExpStatement()
    *       | IoStatement()
    *       | GuiStatement()
    */
   public void visit(Statement n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   /**
    * exp -> Exp()
    * nodeToken -> ";"
    */
   public void visit(ExpStatement n, A argu) {
      n.exp.accept(this, argu);
      n.nodeToken.accept(this, argu);
   }

   /**
    * nodeToken -> "{"
    * nodeListOptional -> ( Statement() )*
    * nodeToken1 -> "}"
    */
   public void visit(Block n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
      n.nodeToken1.accept(this, argu);
   }

   /**
    * identifier -> Identifier()
    * nodeToken -> "="
    * exp -> Exp()
    * nodeToken1 -> ";"
    */
   public void visit(AssignmentStatement n, A argu) {
      n.identifier.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.exp.accept(this, argu);
      n.nodeToken1.accept(this, argu);
   }

   /**
    * identifier -> Identifier()
    * nodeToken -> "["
    * exp -> Exp()
    * nodeToken1 -> "]"
    * nodeToken2 -> "="
    * exp1 -> Exp()
    * nodeToken3 -> ";"
    */
   public void visit(ArrayAssignmentStatement n, A argu) {
      n.identifier.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.exp.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.exp1.accept(this, argu);
      n.nodeToken3.accept(this, argu);
   }

   /**
    * nodeToken -> "if"
    * nodeToken1 -> "("
    * exp -> Exp()
    * nodeToken2 -> ")"
    * statement -> Statement()
    * nodeOptional -> [ ElseStatement() ]
    */
   public void visit(IfStatement n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.exp.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.statement.accept(this, argu);
      n.nodeOptional.accept(this, argu);
   }

   /**
    * nodeToken -> "else"
    * statement -> Statement()
    */
   public void visit(ElseStatement n, A argu) {
      n.nodeToken.accept(this, argu);
      n.statement.accept(this, argu);
   }

   /**
    * nodeToken -> "while"
    * nodeToken1 -> "("
    * exp -> Exp()
    * nodeToken2 -> ")"
    * statement -> Statement()
    */
   public void visit(WhileStatement n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.exp.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.statement.accept(this, argu);
   }

   /**
    * nodeChoice -> Println()
    *       | Print()
    *       | Read()
    */
   public void visit(IoStatement n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   /**
    * nodeToken -> "System.out.println"
    * nodeToken1 -> "("
    * exp -> Exp()
    * nodeToken2 -> ")"
    * nodeToken3 -> ";"
    */
   public void visit(Println n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.exp.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.nodeToken3.accept(this, argu);
   }

   /**
    * nodeToken -> "Minijava.print"
    * nodeToken1 -> "("
    * exp -> Exp()
    * nodeToken2 -> ")"
    * nodeToken3 -> ";"
    */
   public void visit(Print n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.exp.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.nodeToken3.accept(this, argu);
   }

   /**
    * nodeToken -> "Minijava.scanf"
    * nodeToken1 -> "("
    * identifier -> Identifier()
    * nodeToken2 -> ")"
    * nodeToken3 -> ";"
    */
   public void visit(Read n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.identifier.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.nodeToken3.accept(this, argu);
   }

   /**
    * nodeChoice -> Window()
    *       | Wait()
    *       | GetKeyState()
    *       | Color()
    *       | Bitblt()
    *       | Present()
    *       | Srand()
    *       | Rand()
    */
   public void visit(GuiStatement n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   /**
    * nodeToken -> "Minijava.present"
    * nodeToken1 -> "("
    * exp -> Exp()
    * nodeToken2 -> ","
    * exp1 -> Exp()
    * nodeToken3 -> ")"
    * nodeToken4 -> ";"
    */
   public void visit(Present n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.exp.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.exp1.accept(this, argu);
      n.nodeToken3.accept(this, argu);
      n.nodeToken4.accept(this, argu);
   }

   /**
    * nodeToken -> "Minijava.srand"
    * nodeToken1 -> "("
    * exp -> Exp()
    * nodeToken2 -> ")"
    * nodeToken3 -> ";"
    */
   public void visit(Srand n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.exp.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.nodeToken3.accept(this, argu);
   }

   /**
    * nodeToken -> "Minijava.rand"
    * nodeToken1 -> "("
    * identifier -> Identifier()
    * nodeToken2 -> ")"
    * nodeToken3 -> ";"
    */
   public void visit(Rand n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.identifier.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.nodeToken3.accept(this, argu);
   }

   /**
    * nodeToken -> "Minijava.window"
    * nodeToken1 -> "("
    * exp -> Exp()
    * nodeToken2 -> ","
    * exp1 -> Exp()
    * nodeToken3 -> ","
    * exp2 -> Exp()
    * nodeToken4 -> ","
    * exp3 -> Exp()
    * nodeToken5 -> ")"
    * nodeToken6 -> ";"
    */
   public void visit(Window n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.exp.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.exp1.accept(this, argu);
      n.nodeToken3.accept(this, argu);
      n.exp2.accept(this, argu);
      n.nodeToken4.accept(this, argu);
      n.exp3.accept(this, argu);
      n.nodeToken5.accept(this, argu);
      n.nodeToken6.accept(this, argu);
   }

   /**
    * nodeToken -> "Minijava.wait"
    * nodeToken1 -> "("
    * exp -> Exp()
    * nodeToken2 -> ")"
    * nodeToken3 -> ";"
    */
   public void visit(Wait n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.exp.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.nodeToken3.accept(this, argu);
   }

   /**
    * nodeToken -> "Minijava.getkey"
    * nodeToken1 -> "("
    * exp -> Exp()
    * nodeToken2 -> ","
    * identifier -> Identifier()
    * nodeToken3 -> ")"
    * nodeToken4 -> ";"
    */
   public void visit(GetKeyState n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.exp.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.identifier.accept(this, argu);
      n.nodeToken3.accept(this, argu);
      n.nodeToken4.accept(this, argu);
   }

   /**
    * nodeToken -> "Minijava.color"
    * nodeToken1 -> "("
    * exp -> Exp()
    * nodeToken2 -> ","
    * exp1 -> Exp()
    * nodeToken3 -> ","
    * exp2 -> Exp()
    * nodeToken4 -> ","
    * exp3 -> Exp()
    * nodeToken5 -> ","
    * identifier -> Identifier()
    * nodeToken6 -> ")"
    * nodeToken7 -> ";"
    */
   public void visit(Color n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.exp.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.exp1.accept(this, argu);
      n.nodeToken3.accept(this, argu);
      n.exp2.accept(this, argu);
      n.nodeToken4.accept(this, argu);
      n.exp3.accept(this, argu);
      n.nodeToken5.accept(this, argu);
      n.identifier.accept(this, argu);
      n.nodeToken6.accept(this, argu);
      n.nodeToken7.accept(this, argu);
   }

   /**
    * nodeToken -> "Minijava.bitblt"
    * nodeToken1 -> "("
    * exp -> Exp()
    * nodeToken2 -> ","
    * exp1 -> Exp()
    * nodeToken3 -> ","
    * exp2 -> Exp()
    * nodeToken4 -> ","
    * exp3 -> Exp()
    * nodeToken5 -> ","
    * exp4 -> Exp()
    * nodeToken6 -> ")"
    * nodeToken7 -> ";"
    */
   public void visit(Bitblt n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.exp.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.exp1.accept(this, argu);
      n.nodeToken3.accept(this, argu);
      n.exp2.accept(this, argu);
      n.nodeToken4.accept(this, argu);
      n.exp3.accept(this, argu);
      n.nodeToken5.accept(this, argu);
      n.exp4.accept(this, argu);
      n.nodeToken6.accept(this, argu);
      n.nodeToken7.accept(this, argu);
   }

   /**
    * nodeChoice -> AndExpression()
    *       | OrExpression()
    *       | CompareExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ModExpression()
    *       | CompareBigExpression()
    *       | CompareEquExpression()
    *       | CompareNotEquExpression()
    *       | CompareBigEquExpression()
    *       | CompareSmallEquExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public void visit(Exp n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "/"
    * primaryExpression1 -> PrimaryExpression()
    */
   public void visit(DivExpression n, A argu) {
      n.primaryExpression.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.primaryExpression1.accept(this, argu);
   }

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "%"
    * primaryExpression1 -> PrimaryExpression()
    */
   public void visit(ModExpression n, A argu) {
      n.primaryExpression.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.primaryExpression1.accept(this, argu);
   }

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> ">"
    * primaryExpression1 -> PrimaryExpression()
    */
   public void visit(CompareBigExpression n, A argu) {
      n.primaryExpression.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.primaryExpression1.accept(this, argu);
   }

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "=="
    * primaryExpression1 -> PrimaryExpression()
    */
   public void visit(CompareEquExpression n, A argu) {
      n.primaryExpression.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.primaryExpression1.accept(this, argu);
   }

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "!="
    * primaryExpression1 -> PrimaryExpression()
    */
   public void visit(CompareNotEquExpression n, A argu) {
      n.primaryExpression.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.primaryExpression1.accept(this, argu);
   }

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> ">="
    * primaryExpression1 -> PrimaryExpression()
    */
   public void visit(CompareBigEquExpression n, A argu) {
      n.primaryExpression.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.primaryExpression1.accept(this, argu);
   }

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "<="
    * primaryExpression1 -> PrimaryExpression()
    */
   public void visit(CompareSmallEquExpression n, A argu) {
      n.primaryExpression.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.primaryExpression1.accept(this, argu);
   }

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "||"
    * primaryExpression1 -> PrimaryExpression()
    */
   public void visit(OrExpression n, A argu) {
      n.primaryExpression.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.primaryExpression1.accept(this, argu);
   }

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "&&"
    * primaryExpression1 -> PrimaryExpression()
    */
   public void visit(AndExpression n, A argu) {
      n.primaryExpression.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.primaryExpression1.accept(this, argu);
   }

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "<"
    * primaryExpression1 -> PrimaryExpression()
    */
   public void visit(CompareExpression n, A argu) {
      n.primaryExpression.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.primaryExpression1.accept(this, argu);
   }

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "+"
    * primaryExpression1 -> PrimaryExpression()
    */
   public void visit(PlusExpression n, A argu) {
      n.primaryExpression.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.primaryExpression1.accept(this, argu);
   }

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "-"
    * primaryExpression1 -> PrimaryExpression()
    */
   public void visit(MinusExpression n, A argu) {
      n.primaryExpression.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.primaryExpression1.accept(this, argu);
   }

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "*"
    * primaryExpression1 -> PrimaryExpression()
    */
   public void visit(TimesExpression n, A argu) {
      n.primaryExpression.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.primaryExpression1.accept(this, argu);
   }

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "["
    * primaryExpression1 -> PrimaryExpression()
    * nodeToken1 -> "]"
    */
   public void visit(ArrayLookup n, A argu) {
      n.primaryExpression.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.primaryExpression1.accept(this, argu);
      n.nodeToken1.accept(this, argu);
   }

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "."
    * nodeToken1 -> "length"
    */
   public void visit(ArrayLength n, A argu) {
      n.primaryExpression.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
   }

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "."
    * identifier -> Identifier()
    * nodeToken1 -> "("
    * nodeOptional -> ( ExpList() )?
    * nodeToken2 -> ")"
    */
   public void visit(MessageSend n, A argu) {
      n.primaryExpression.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.identifier.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeOptional.accept(this, argu);
      n.nodeToken2.accept(this, argu);
   }

   /**
    * exp -> Exp()
    * nodeListOptional -> ( ExpRest() )*
    */
   public void visit(ExpList n, A argu) {
      n.exp.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
   }

   /**
    * nodeToken -> ","
    * exp -> Exp()
    */
   public void visit(ExpRest n, A argu) {
      n.nodeToken.accept(this, argu);
      n.exp.accept(this, argu);
   }

   /**
    * nodeChoice -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    *       | CharLiteral()
    */
   public void visit(PrimaryExpression n, A argu) {
      n.nodeChoice.accept(this, argu);
   }

   /**
    * nodeToken -> <INTEGER_LITERAL>
    */
   public void visit(IntegerLiteral n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   /**
    * nodeToken -> <CHAR_LITERAL>
    */
   public void visit(CharLiteral n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   /**
    * nodeToken -> "true"
    */
   public void visit(TrueLiteral n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   /**
    * nodeToken -> "false"
    */
   public void visit(FalseLiteral n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   /**
    * nodeToken -> <IDENTIFIER>
    */
   public void visit(Identifier n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   /**
    * nodeToken -> "this"
    */
   public void visit(ThisExpression n, A argu) {
      n.nodeToken.accept(this, argu);
   }

   /**
    * nodeToken -> "new"
    * nodeToken1 -> "int"
    * nodeToken2 -> "["
    * exp -> Exp()
    * nodeToken3 -> "]"
    */
   public void visit(ArrayAllocationExpression n, A argu) {
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.exp.accept(this, argu);
      n.nodeToken3.accept(this, argu);
   }

   /**
    * nodeToken -> "new"
    * identifier -> Identifier()
    * nodeToken1 -> "("
    * nodeToken2 -> ")"
    */
   public void visit(AllocationExpression n, A argu) {
      n.nodeToken.accept(this, argu);
      n.identifier.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
   }

   /**
    * nodeToken -> "!"
    * exp -> Exp()
    */
   public void visit(NotExpression n, A argu) {
      n.nodeToken.accept(this, argu);
      n.exp.accept(this, argu);
   }

   /**
    * nodeToken -> "("
    * exp -> Exp()
    * nodeToken1 -> ")"
    */
   public void visit(BracketExpression n, A argu) {
      n.nodeToken.accept(this, argu);
      n.exp.accept(this, argu);
      n.nodeToken1.accept(this, argu);
   }

}

/* Generated By:JavaCC: Do not edit this line. MiniJavaParser.java */
package mini;

import mini.syntaxtree.*;
import mini.visitor.*;
import java.util.Vector;


public @SuppressWarnings("all") class MiniJavaParser implements MiniJavaParserConstants {

  final public Program Program() throws ParseException {
   MainClass n0;
   NodeListOptional n1 = new NodeListOptional();
   ClassDecl n2;
   NodeOptional n3 = new NodeOptional();
   DrawClass n4;
   NodeListOptional n5 = new NodeListOptional();
   ClassDecl n6;
   NodeToken n7;
   Token n8;
    n0 = MainClass();
    label_1:
    while (true) {
      if (jj_2_1(4)) {
        ;
      } else {
        break label_1;
      }
      n2 = ClassDecl();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
    if (jj_2_2(4)) {
      n4 = DrawClass();
        n3.addNode(n4);
    } else {
      ;
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_2;
      }
      n6 = ClassDecl();
        n5.addNode(n6);
    }
     n5.nodes.trimToSize();
    n8 = jj_consume_token(0);
      n8.beginColumn++; n8.endColumn++;
      n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new Program(n0,n1,n3,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  final public MainClass MainClass() throws ParseException {
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   Identifier n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   IoStatement n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
    n1 = jj_consume_token(CLASS);
                n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier();
    n4 = jj_consume_token(LBRACE);
            n3 = JTBToolkit.makeNodeToken(n4);
    n6 = jj_consume_token(PUBLIC);
                 n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(STATIC);
                 n7 = JTBToolkit.makeNodeToken(n8);
    n10 = jj_consume_token(VOID);
                n9 = JTBToolkit.makeNodeToken(n10);
    n12 = jj_consume_token(MAIN);
                n11 = JTBToolkit.makeNodeToken(n12);
    n14 = jj_consume_token(LPAREN);
             n13 = JTBToolkit.makeNodeToken(n14);
    n16 = jj_consume_token(STRING);
                  n15 = JTBToolkit.makeNodeToken(n16);
    n18 = jj_consume_token(LSQPAREN);
             n17 = JTBToolkit.makeNodeToken(n18);
    n20 = jj_consume_token(RSQPAREN);
             n19 = JTBToolkit.makeNodeToken(n20);
    n21 = Identifier();
    n23 = jj_consume_token(RPAREN);
             n22 = JTBToolkit.makeNodeToken(n23);
    n25 = jj_consume_token(LBRACE);
             n24 = JTBToolkit.makeNodeToken(n25);
    n26 = IoStatement();
    n28 = jj_consume_token(RBRACE);
             n27 = JTBToolkit.makeNodeToken(n28);
    n30 = jj_consume_token(RBRACE);
             n29 = JTBToolkit.makeNodeToken(n30);
     {if (true) return new MainClass(n0,n2,n3,n5,n7,n9,n11,n13,n15,n17,n19,n21,n22,n24,n26,n27,n29);}
    throw new Error("Missing return statement in function");
  }

  final public DrawClass DrawClass() throws ParseException {
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeListOptional n9 = new NodeListOptional();
   VarDecl n10;
   NodeListOptional n11 = new NodeListOptional();
   MethodDecl n12;
   MessageHandler n13;
   NodeListOptional n14 = new NodeListOptional();
   MethodDecl n15;
   NodeToken n16;
   Token n17;
    n1 = jj_consume_token(CLASS);
                n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier();
    n4 = jj_consume_token(EXTENDS);
                  n3 = JTBToolkit.makeNodeToken(n4);
    n6 = jj_consume_token(MINIDRAW);
                   n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(LBRACE);
            n7 = JTBToolkit.makeNodeToken(n8);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case INTEGER:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_3;
      }
      n10 = VarDecl();
        n9.addNode(n10);
    }
     n9.nodes.trimToSize();
    label_4:
    while (true) {
      if (jj_2_3(2)) {
        ;
      } else {
        break label_4;
      }
      n12 = MethodDecl();
        n11.addNode(n12);
    }
     n11.nodes.trimToSize();
    n13 = MessageHandler();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_5;
      }
      n15 = MethodDecl();
        n14.addNode(n15);
    }
     n14.nodes.trimToSize();
    n17 = jj_consume_token(RBRACE);
             n16 = JTBToolkit.makeNodeToken(n17);
     {if (true) return new DrawClass(n0,n2,n3,n5,n7,n9,n11,n13,n14,n16);}
    throw new Error("Missing return statement in function");
  }

  final public MessageHandler MessageHandler() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   ArrayType n10;
   Identifier n11;
   NodeToken n12;
   Token n13;
   IntegerType n14;
   Identifier n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeListOptional n20 = new NodeListOptional();
   VarDecl n21;
   NodeListOptional n22 = new NodeListOptional();
   Statement n23;
   NodeToken n24;
   Token n25;
   Exp n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
    n1 = jj_consume_token(PUBLIC);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(FINAL);
                n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(INTEGER);
              n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(MESSAGEHANDLER);
                         n6 = JTBToolkit.makeNodeToken(n7);
    n9 = jj_consume_token(LPAREN);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = ArrayType();
    n11 = Identifier();
    n13 = jj_consume_token(58);
             n12 = JTBToolkit.makeNodeToken(n13);
    n14 = IntegerType();
    n15 = Identifier();
    n17 = jj_consume_token(RPAREN);
             n16 = JTBToolkit.makeNodeToken(n17);
    n19 = jj_consume_token(LBRACE);
             n18 = JTBToolkit.makeNodeToken(n19);
    label_6:
    while (true) {
      if (jj_2_4(2)) {
        ;
      } else {
        break label_6;
      }
      n21 = VarDecl();
        n20.addNode(n21);
    }
     n20.nodes.trimToSize();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case LBRACE:
      case NOT:
      case IF:
      case WHILE:
      case PRINT:
      case NEW:
      case THIS:
      case TRUE:
      case FALSE:
      case INTEGER_LITERAL:
      case IDENTIFIER:
      case CHAR_LITERAL:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_7;
      }
      n23 = Statement();
        n22.addNode(n23);
    }
     n22.nodes.trimToSize();
    n25 = jj_consume_token(RETURN);
                  n24 = JTBToolkit.makeNodeToken(n25);
    n26 = Exp();
    n28 = jj_consume_token(SEMICOLON);
             n27 = JTBToolkit.makeNodeToken(n28);
    n30 = jj_consume_token(RBRACE);
             n29 = JTBToolkit.makeNodeToken(n30);
     {if (true) return new MessageHandler(n0,n2,n4,n6,n8,n10,n11,n12,n14,n15,n16,n18,n20,n22,n24,n26,n27,n29);}
    throw new Error("Missing return statement in function");
  }

  final public ClassDecl ClassDecl() throws ParseException {
   NodeChoice n0;
   ClassDeclaration n1;
   ClassExtendsDeclaration n2;
    if (jj_2_5(3)) {
      n1 = ClassDeclaration();
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        n2 = ClassExtendsDeclaration();
        n0 = new NodeChoice(n2, 1);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new ClassDecl(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ClassDeclaration ClassDeclaration() throws ParseException {
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   NodeListOptional n5 = new NodeListOptional();
   VarDecl n6;
   NodeListOptional n7 = new NodeListOptional();
   MethodDecl n8;
   NodeToken n9;
   Token n10;
    n1 = jj_consume_token(CLASS);
                n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier();
    n4 = jj_consume_token(LBRACE);
            n3 = JTBToolkit.makeNodeToken(n4);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case INTEGER:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_8;
      }
      n6 = VarDecl();
        n5.addNode(n6);
    }
     n5.nodes.trimToSize();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_9;
      }
      n8 = MethodDecl();
        n7.addNode(n8);
    }
     n7.nodes.trimToSize();
    n10 = jj_consume_token(RBRACE);
             n9 = JTBToolkit.makeNodeToken(n10);
     {if (true) return new ClassDeclaration(n0,n2,n3,n5,n7,n9);}
    throw new Error("Missing return statement in function");
  }

  final public ClassExtendsDeclaration ClassExtendsDeclaration() throws ParseException {
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   Identifier n5;
   NodeToken n6;
   Token n7;
   NodeListOptional n8 = new NodeListOptional();
   VarDecl n9;
   NodeListOptional n10 = new NodeListOptional();
   MethodDecl n11;
   NodeToken n12;
   Token n13;
    n1 = jj_consume_token(CLASS);
                n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier();
    n4 = jj_consume_token(EXTENDS);
                  n3 = JTBToolkit.makeNodeToken(n4);
    n5 = Identifier();
    n7 = jj_consume_token(LBRACE);
            n6 = JTBToolkit.makeNodeToken(n7);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case INTEGER:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_10;
      }
      n9 = VarDecl();
        n8.addNode(n9);
    }
     n8.nodes.trimToSize();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_11;
      }
      n11 = MethodDecl();
        n10.addNode(n11);
    }
     n10.nodes.trimToSize();
    n13 = jj_consume_token(RBRACE);
             n12 = JTBToolkit.makeNodeToken(n13);
     {if (true) return new ClassExtendsDeclaration(n0,n2,n3,n5,n6,n8,n10,n12);}
    throw new Error("Missing return statement in function");
  }

  final public VarDecl VarDecl() throws ParseException {
   Type n0;
   Identifier n1;
   NodeToken n2;
   Token n3;
    n0 = Type();
    n1 = Identifier();
    n3 = jj_consume_token(SEMICOLON);
            n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new VarDecl(n0,n1,n2);}
    throw new Error("Missing return statement in function");
  }

  final public MethodDecl MethodDecl() throws ParseException {
   NodeToken n0;
   Token n1;
   Type n2;
   Identifier n3;
   NodeToken n4;
   Token n5;
   NodeOptional n6 = new NodeOptional();
   FormalList n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeListOptional n12 = new NodeListOptional();
   VarDecl n13;
   NodeListOptional n14 = new NodeListOptional();
   Statement n15;
   NodeToken n16;
   Token n17;
   Exp n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
    n1 = jj_consume_token(PUBLIC);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Type();
    n3 = Identifier();
    n5 = jj_consume_token(LPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case INTEGER:
    case IDENTIFIER:
      n7 = FormalList();
        n6.addNode(n7);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    n9 = jj_consume_token(RPAREN);
            n8 = JTBToolkit.makeNodeToken(n9);
    n11 = jj_consume_token(LBRACE);
             n10 = JTBToolkit.makeNodeToken(n11);
    label_12:
    while (true) {
      if (jj_2_6(2)) {
        ;
      } else {
        break label_12;
      }
      n13 = VarDecl();
        n12.addNode(n13);
    }
     n12.nodes.trimToSize();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case LBRACE:
      case NOT:
      case IF:
      case WHILE:
      case PRINT:
      case NEW:
      case THIS:
      case TRUE:
      case FALSE:
      case INTEGER_LITERAL:
      case IDENTIFIER:
      case CHAR_LITERAL:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_13;
      }
      n15 = Statement();
        n14.addNode(n15);
    }
     n14.nodes.trimToSize();
    n17 = jj_consume_token(RETURN);
                  n16 = JTBToolkit.makeNodeToken(n17);
    n18 = Exp();
    n20 = jj_consume_token(SEMICOLON);
             n19 = JTBToolkit.makeNodeToken(n20);
    n22 = jj_consume_token(RBRACE);
             n21 = JTBToolkit.makeNodeToken(n22);
     {if (true) return new MethodDecl(n0,n2,n3,n4,n6,n8,n10,n12,n14,n16,n18,n19,n21);}
    throw new Error("Missing return statement in function");
  }

  final public FormalList FormalList() throws ParseException {
   FormalParameter n0;
   NodeListOptional n1 = new NodeListOptional();
   FormalRest n2;
    n0 = FormalParameter();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 58:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_14;
      }
      n2 = FormalRest();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new FormalList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public FormalParameter FormalParameter() throws ParseException {
   Type n0;
   Identifier n1;
    n0 = Type();
    n1 = Identifier();
     {if (true) return new FormalParameter(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public FormalRest FormalRest() throws ParseException {
   NodeToken n0;
   Token n1;
   FormalParameter n2;
    n1 = jj_consume_token(58);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = FormalParameter();
     {if (true) return new FormalRest(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public Type Type() throws ParseException {
   NodeChoice n0;
   ArrayType n1;
   BooleanType n2;
   IntegerType n3;
   Identifier n4;
    if (jj_2_7(3)) {
      n1 = ArrayType();
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
        n2 = BooleanType();
        n0 = new NodeChoice(n2, 1);
        break;
      case INTEGER:
        n3 = IntegerType();
        n0 = new NodeChoice(n3, 2);
        break;
      case IDENTIFIER:
        n4 = Identifier();
        n0 = new NodeChoice(n4, 3);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new Type(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ArrayType ArrayType() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
    n1 = jj_consume_token(INTEGER);
              n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LSQPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(RSQPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new ArrayType(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  final public BooleanType BooleanType() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(BOOLEAN);
                  n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new BooleanType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public IntegerType IntegerType() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(INTEGER);
              n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new IntegerType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Statement Statement() throws ParseException {
   NodeChoice n0;
   Block n1;
   AssignmentStatement n2;
   ArrayAssignmentStatement n3;
   IfStatement n4;
   WhileStatement n5;
   ExpStatement n6;
   IoStatement n7;
   GuiStatement n8;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      n1 = Block();
        n0 = new NodeChoice(n1, 0);
      break;
    default:
      jj_la1[13] = jj_gen;
      if (jj_2_8(2)) {
        n2 = AssignmentStatement();
        n0 = new NodeChoice(n2, 1);
      } else if (jj_2_9(2)) {
        n3 = ArrayAssignmentStatement();
        n0 = new NodeChoice(n3, 2);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
          n4 = IfStatement();
        n0 = new NodeChoice(n4, 3);
          break;
        case WHILE:
          n5 = WhileStatement();
        n0 = new NodeChoice(n5, 4);
          break;
        case LPAREN:
        case NOT:
        case NEW:
        case THIS:
        case TRUE:
        case FALSE:
        case INTEGER_LITERAL:
        case IDENTIFIER:
        case CHAR_LITERAL:
          n6 = ExpStatement();
        n0 = new NodeChoice(n6, 5);
          break;
        case PRINT:
        case 59:
        case 60:
          n7 = IoStatement();
        n0 = new NodeChoice(n7, 6);
          break;
        case 61:
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
          n8 = GuiStatement();
        n0 = new NodeChoice(n8, 7);
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
     {if (true) return new Statement(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ExpStatement ExpStatement() throws ParseException {
   Exp n0;
   NodeToken n1;
   Token n2;
    n0 = Exp();
    n2 = jj_consume_token(SEMICOLON);
            n1 = JTBToolkit.makeNodeToken(n2);
     {if (true) return new ExpStatement(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public Block Block() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   Statement n3;
   NodeToken n4;
   Token n5;
    n1 = jj_consume_token(LBRACE);
            n0 = JTBToolkit.makeNodeToken(n1);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case LBRACE:
      case NOT:
      case IF:
      case WHILE:
      case PRINT:
      case NEW:
      case THIS:
      case TRUE:
      case FALSE:
      case INTEGER_LITERAL:
      case IDENTIFIER:
      case CHAR_LITERAL:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_15;
      }
      n3 = Statement();
        n2.addNode(n3);
    }
     n2.nodes.trimToSize();
    n5 = jj_consume_token(RBRACE);
            n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new Block(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  final public AssignmentStatement AssignmentStatement() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   Exp n3;
   NodeToken n4;
   Token n5;
    n0 = Identifier();
    n2 = jj_consume_token(ASSIGN);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Exp();
    n5 = jj_consume_token(SEMICOLON);
            n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new AssignmentStatement(n0,n1,n3,n4);}
    throw new Error("Missing return statement in function");
  }

  final public ArrayAssignmentStatement ArrayAssignmentStatement() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   Exp n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Exp n8;
   NodeToken n9;
   Token n10;
    n0 = Identifier();
    n2 = jj_consume_token(LSQPAREN);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Exp();
    n5 = jj_consume_token(RSQPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(ASSIGN);
            n6 = JTBToolkit.makeNodeToken(n7);
    n8 = Exp();
    n10 = jj_consume_token(SEMICOLON);
             n9 = JTBToolkit.makeNodeToken(n10);
     {if (true) return new ArrayAssignmentStatement(n0,n1,n3,n4,n6,n8,n9);}
    throw new Error("Missing return statement in function");
  }

  final public IfStatement IfStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Exp n4;
   NodeToken n5;
   Token n6;
   Statement n7;
   NodeOptional n8 = new NodeOptional();
   ElseStatement n9;
    n1 = jj_consume_token(IF);
             n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Exp();
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Statement();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      n9 = ElseStatement();
        n8.addNode(n9);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
     {if (true) return new IfStatement(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public ElseStatement ElseStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   Statement n2;
    n1 = jj_consume_token(ELSE);
               n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Statement();
     {if (true) return new ElseStatement(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public WhileStatement WhileStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Exp n4;
   NodeToken n5;
   Token n6;
   Statement n7;
    n1 = jj_consume_token(WHILE);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Exp();
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Statement();
     {if (true) return new WhileStatement(n0,n2,n4,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  final public IoStatement IoStatement() throws ParseException {
   NodeChoice n0;
   Println n1;
   Print n2;
   Read n3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRINT:
      n1 = Println();
        n0 = new NodeChoice(n1, 0);
      break;
    case 59:
      n2 = Print();
        n0 = new NodeChoice(n2, 1);
      break;
    case 60:
      n3 = Read();
        n0 = new NodeChoice(n3, 2);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new IoStatement(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Println Println() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Exp n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
    n1 = jj_consume_token(PRINT);
                             n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Exp();
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(SEMICOLON);
            n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new Println(n0,n2,n4,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  final public Print Print() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Exp n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
    n1 = jj_consume_token(59);
                         n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Exp();
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(SEMICOLON);
            n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new Print(n0,n2,n4,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  final public Read Read() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
    n1 = jj_consume_token(60);
                         n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Identifier();
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(SEMICOLON);
            n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new Read(n0,n2,n4,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  final public GuiStatement GuiStatement() throws ParseException {
   NodeChoice n0;
   Window n1;
   Wait n2;
   GetKeyState n3;
   Color n4;
   Bitblt n5;
   Present n6;
   Srand n7;
   Rand n8;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 64:
      n1 = Window();
        n0 = new NodeChoice(n1, 0);
      break;
    case 65:
      n2 = Wait();
        n0 = new NodeChoice(n2, 1);
      break;
    case 66:
      n3 = GetKeyState();
        n0 = new NodeChoice(n3, 2);
      break;
    case 67:
      n4 = Color();
        n0 = new NodeChoice(n4, 3);
      break;
    case 68:
      n5 = Bitblt();
        n0 = new NodeChoice(n5, 4);
      break;
    case 61:
      n6 = Present();
        n0 = new NodeChoice(n6, 5);
      break;
    case 62:
      n7 = Srand();
        n0 = new NodeChoice(n7, 6);
      break;
    case 63:
      n8 = Rand();
        n0 = new NodeChoice(n8, 7);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new GuiStatement(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Present Present() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Exp n4;
   NodeToken n5;
   Token n6;
   Exp n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
    n1 = jj_consume_token(61);
                           n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Exp();
    n6 = jj_consume_token(58);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Exp();
    n9 = jj_consume_token(RPAREN);
            n8 = JTBToolkit.makeNodeToken(n9);
    n11 = jj_consume_token(SEMICOLON);
             n10 = JTBToolkit.makeNodeToken(n11);
     {if (true) return new Present(n0,n2,n4,n5,n7,n8,n10);}
    throw new Error("Missing return statement in function");
  }

  final public Srand Srand() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Exp n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
    n1 = jj_consume_token(62);
                         n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Exp();
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(SEMICOLON);
            n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new Srand(n0,n2,n4,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  final public Rand Rand() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
    n1 = jj_consume_token(63);
                        n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Identifier();
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(SEMICOLON);
            n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new Rand(n0,n2,n4,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  final public Window Window() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Exp n4;
   NodeToken n5;
   Token n6;
   Exp n7;
   NodeToken n8;
   Token n9;
   Exp n10;
   NodeToken n11;
   Token n12;
   Exp n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
    n1 = jj_consume_token(64);
                          n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Exp();
    n6 = jj_consume_token(58);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Exp();
    n9 = jj_consume_token(58);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = Exp();
    n12 = jj_consume_token(58);
             n11 = JTBToolkit.makeNodeToken(n12);
    n13 = Exp();
    n15 = jj_consume_token(RPAREN);
             n14 = JTBToolkit.makeNodeToken(n15);
    n17 = jj_consume_token(SEMICOLON);
             n16 = JTBToolkit.makeNodeToken(n17);
     {if (true) return new Window(n0,n2,n4,n5,n7,n8,n10,n11,n13,n14,n16);}
    throw new Error("Missing return statement in function");
  }

  final public Wait Wait() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Exp n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
    n1 = jj_consume_token(65);
                        n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Exp();
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(SEMICOLON);
            n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new Wait(n0,n2,n4,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  final public GetKeyState GetKeyState() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Exp n4;
   NodeToken n5;
   Token n6;
   Identifier n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
    n1 = jj_consume_token(66);
                          n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Exp();
    n6 = jj_consume_token(58);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Identifier();
    n9 = jj_consume_token(RPAREN);
            n8 = JTBToolkit.makeNodeToken(n9);
    n11 = jj_consume_token(SEMICOLON);
             n10 = JTBToolkit.makeNodeToken(n11);
     {if (true) return new GetKeyState(n0,n2,n4,n5,n7,n8,n10);}
    throw new Error("Missing return statement in function");
  }

  final public Color Color() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Exp n4;
   NodeToken n5;
   Token n6;
   Exp n7;
   NodeToken n8;
   Token n9;
   Exp n10;
   NodeToken n11;
   Token n12;
   Exp n13;
   NodeToken n14;
   Token n15;
   Identifier n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
    n1 = jj_consume_token(67);
                         n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Exp();
    n6 = jj_consume_token(58);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Exp();
    n9 = jj_consume_token(58);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = Exp();
    n12 = jj_consume_token(58);
             n11 = JTBToolkit.makeNodeToken(n12);
    n13 = Exp();
    n15 = jj_consume_token(58);
             n14 = JTBToolkit.makeNodeToken(n15);
    n16 = Identifier();
    n18 = jj_consume_token(RPAREN);
             n17 = JTBToolkit.makeNodeToken(n18);
    n20 = jj_consume_token(SEMICOLON);
             n19 = JTBToolkit.makeNodeToken(n20);
     {if (true) return new Color(n0,n2,n4,n5,n7,n8,n10,n11,n13,n14,n16,n17,n19);}
    throw new Error("Missing return statement in function");
  }

  final public Bitblt Bitblt() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Exp n4;
   NodeToken n5;
   Token n6;
   Exp n7;
   NodeToken n8;
   Token n9;
   Exp n10;
   NodeToken n11;
   Token n12;
   Exp n13;
   NodeToken n14;
   Token n15;
   Exp n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
    n1 = jj_consume_token(68);
                          n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Exp();
    n6 = jj_consume_token(58);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Exp();
    n9 = jj_consume_token(58);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = Exp();
    n12 = jj_consume_token(58);
             n11 = JTBToolkit.makeNodeToken(n12);
    n13 = Exp();
    n15 = jj_consume_token(58);
             n14 = JTBToolkit.makeNodeToken(n15);
    n16 = Exp();
    n18 = jj_consume_token(RPAREN);
             n17 = JTBToolkit.makeNodeToken(n18);
    n20 = jj_consume_token(SEMICOLON);
             n19 = JTBToolkit.makeNodeToken(n20);
     {if (true) return new Bitblt(n0,n2,n4,n5,n7,n8,n10,n11,n13,n14,n16,n17,n19);}
    throw new Error("Missing return statement in function");
  }

  final public Exp Exp() throws ParseException {
   NodeChoice n0;
   AndExpression n1;
   OrExpression n2;
   CompareExpression n3;
   PlusExpression n4;
   MinusExpression n5;
   TimesExpression n6;
   DivExpression n7;
   ModExpression n8;
   CompareBigExpression n9;
   CompareEquExpression n10;
   CompareNotEquExpression n11;
   CompareBigEquExpression n12;
   CompareSmallEquExpression n13;
   ArrayLookup n14;
   ArrayLength n15;
   MessageSend n16;
   PrimaryExpression n17;
    if (jj_2_10(2147483647)) {
      n1 = AndExpression();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_11(2147483647)) {
      n2 = OrExpression();
        n0 = new NodeChoice(n2, 1);
    } else if (jj_2_12(2147483647)) {
      n3 = CompareExpression();
        n0 = new NodeChoice(n3, 2);
    } else if (jj_2_13(2147483647)) {
      n4 = PlusExpression();
        n0 = new NodeChoice(n4, 3);
    } else if (jj_2_14(2147483647)) {
      n5 = MinusExpression();
        n0 = new NodeChoice(n5, 4);
    } else if (jj_2_15(2147483647)) {
      n6 = TimesExpression();
        n0 = new NodeChoice(n6, 5);
    } else if (jj_2_16(2147483647)) {
      n7 = DivExpression();
        n0 = new NodeChoice(n7, 6);
    } else if (jj_2_17(2147483647)) {
      n8 = ModExpression();
        n0 = new NodeChoice(n8, 7);
    } else if (jj_2_18(2147483647)) {
      n9 = CompareBigExpression();
        n0 = new NodeChoice(n9, 8);
    } else if (jj_2_19(2147483647)) {
      n10 = CompareEquExpression();
        n0 = new NodeChoice(n10, 9);
    } else if (jj_2_20(2147483647)) {
      n11 = CompareNotEquExpression();
        n0 = new NodeChoice(n11, 10);
    } else if (jj_2_21(2147483647)) {
      n12 = CompareBigEquExpression();
        n0 = new NodeChoice(n12, 11);
    } else if (jj_2_22(2147483647)) {
      n13 = CompareSmallEquExpression();
        n0 = new NodeChoice(n13, 12);
    } else if (jj_2_23(2147483647)) {
      n14 = ArrayLookup();
        n0 = new NodeChoice(n14, 13);
    } else if (jj_2_24(2147483647)) {
      n15 = ArrayLength();
        n0 = new NodeChoice(n15, 14);
    } else if (jj_2_25(2147483647)) {
      n16 = MessageSend();
        n0 = new NodeChoice(n16, 15);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case NOT:
      case NEW:
      case THIS:
      case TRUE:
      case FALSE:
      case INTEGER_LITERAL:
      case IDENTIFIER:
      case CHAR_LITERAL:
        n17 = PrimaryExpression();
        n0 = new NodeChoice(n17, 16);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new Exp(n0);}
    throw new Error("Missing return statement in function");
  }

  final public DivExpression DivExpression() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;
    n0 = PrimaryExpression();
    n2 = jj_consume_token(DIV);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = PrimaryExpression();
     {if (true) return new DivExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  final public ModExpression ModExpression() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;
    n0 = PrimaryExpression();
    n2 = jj_consume_token(MOD);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = PrimaryExpression();
     {if (true) return new ModExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  final public CompareBigExpression CompareBigExpression() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;
    n0 = PrimaryExpression();
    n2 = jj_consume_token(GT);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = PrimaryExpression();
     {if (true) return new CompareBigExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  final public CompareEquExpression CompareEquExpression() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;
    n0 = PrimaryExpression();
    n2 = jj_consume_token(EQU);
             n1 = JTBToolkit.makeNodeToken(n2);
    n3 = PrimaryExpression();
     {if (true) return new CompareEquExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  final public CompareNotEquExpression CompareNotEquExpression() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;
    n0 = PrimaryExpression();
    n2 = jj_consume_token(NEQU);
             n1 = JTBToolkit.makeNodeToken(n2);
    n3 = PrimaryExpression();
     {if (true) return new CompareNotEquExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  final public CompareBigEquExpression CompareBigEquExpression() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;
    n0 = PrimaryExpression();
    n2 = jj_consume_token(GEQU);
             n1 = JTBToolkit.makeNodeToken(n2);
    n3 = PrimaryExpression();
     {if (true) return new CompareBigEquExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  final public CompareSmallEquExpression CompareSmallEquExpression() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;
    n0 = PrimaryExpression();
    n2 = jj_consume_token(SEQU);
             n1 = JTBToolkit.makeNodeToken(n2);
    n3 = PrimaryExpression();
     {if (true) return new CompareSmallEquExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  final public OrExpression OrExpression() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;
    n0 = PrimaryExpression();
    n2 = jj_consume_token(OR);
             n1 = JTBToolkit.makeNodeToken(n2);
    n3 = PrimaryExpression();
     {if (true) return new OrExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  final public AndExpression AndExpression() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;
    n0 = PrimaryExpression();
    n2 = jj_consume_token(AND);
             n1 = JTBToolkit.makeNodeToken(n2);
    n3 = PrimaryExpression();
     {if (true) return new AndExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  final public CompareExpression CompareExpression() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;
    n0 = PrimaryExpression();
    n2 = jj_consume_token(LT);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = PrimaryExpression();
     {if (true) return new CompareExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  final public PlusExpression PlusExpression() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;
    n0 = PrimaryExpression();
    n2 = jj_consume_token(PLUS);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = PrimaryExpression();
     {if (true) return new PlusExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  final public MinusExpression MinusExpression() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;
    n0 = PrimaryExpression();
    n2 = jj_consume_token(MINUS);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = PrimaryExpression();
     {if (true) return new MinusExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  final public TimesExpression TimesExpression() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;
    n0 = PrimaryExpression();
    n2 = jj_consume_token(69);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = PrimaryExpression();
     {if (true) return new TimesExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  final public ArrayLookup ArrayLookup() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;
   NodeToken n4;
   Token n5;
    n0 = PrimaryExpression();
    n2 = jj_consume_token(LSQPAREN);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = PrimaryExpression();
    n5 = jj_consume_token(RSQPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new ArrayLookup(n0,n1,n3,n4);}
    throw new Error("Missing return statement in function");
  }

  final public ArrayLength ArrayLength() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
    n0 = PrimaryExpression();
    n2 = jj_consume_token(DOT);
            n1 = JTBToolkit.makeNodeToken(n2);
    n4 = jj_consume_token(LENGTH);
                 n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new ArrayLength(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  final public MessageSend MessageSend() throws ParseException {
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   Identifier n3;
   NodeToken n4;
   Token n5;
   NodeOptional n6 = new NodeOptional();
   ExpList n7;
   NodeToken n8;
   Token n9;
    n0 = PrimaryExpression();
    n2 = jj_consume_token(DOT);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Identifier();
    n5 = jj_consume_token(LPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case NOT:
    case NEW:
    case THIS:
    case TRUE:
    case FALSE:
    case INTEGER_LITERAL:
    case IDENTIFIER:
    case CHAR_LITERAL:
      n7 = ExpList();
        n6.addNode(n7);
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    n9 = jj_consume_token(RPAREN);
            n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new MessageSend(n0,n1,n3,n4,n6,n8);}
    throw new Error("Missing return statement in function");
  }

  final public ExpList ExpList() throws ParseException {
   Exp n0;
   NodeListOptional n1 = new NodeListOptional();
   ExpRest n2;
    n0 = Exp();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 58:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_16;
      }
      n2 = ExpRest();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new ExpList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public ExpRest ExpRest() throws ParseException {
   NodeToken n0;
   Token n1;
   Exp n2;
    n1 = jj_consume_token(58);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Exp();
     {if (true) return new ExpRest(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public PrimaryExpression PrimaryExpression() throws ParseException {
   NodeChoice n0;
   IntegerLiteral n1;
   TrueLiteral n2;
   FalseLiteral n3;
   Identifier n4;
   ThisExpression n5;
   ArrayAllocationExpression n6;
   AllocationExpression n7;
   NotExpression n8;
   BracketExpression n9;
   CharLiteral n10;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      n1 = IntegerLiteral();
        n0 = new NodeChoice(n1, 0);
      break;
    case TRUE:
      n2 = TrueLiteral();
        n0 = new NodeChoice(n2, 1);
      break;
    case FALSE:
      n3 = FalseLiteral();
        n0 = new NodeChoice(n3, 2);
      break;
    case IDENTIFIER:
      n4 = Identifier();
        n0 = new NodeChoice(n4, 3);
      break;
    case THIS:
      n5 = ThisExpression();
        n0 = new NodeChoice(n5, 4);
      break;
    default:
      jj_la1[22] = jj_gen;
      if (jj_2_26(3)) {
        n6 = ArrayAllocationExpression();
        n0 = new NodeChoice(n6, 5);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
          n7 = AllocationExpression();
        n0 = new NodeChoice(n7, 6);
          break;
        case NOT:
          n8 = NotExpression();
        n0 = new NodeChoice(n8, 7);
          break;
        case LPAREN:
          n9 = BracketExpression();
        n0 = new NodeChoice(n9, 8);
          break;
        case CHAR_LITERAL:
          n10 = CharLiteral();
        n0 = new NodeChoice(n10, 9);
          break;
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
     {if (true) return new PrimaryExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  final public IntegerLiteral IntegerLiteral() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(INTEGER_LITERAL);
                          n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new IntegerLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  final public CharLiteral CharLiteral() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(CHAR_LITERAL);
                       n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new CharLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  final public TrueLiteral TrueLiteral() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(TRUE);
               n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new TrueLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  final public FalseLiteral FalseLiteral() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(FALSE);
                n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new FalseLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Identifier Identifier() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new Identifier(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ThisExpression ThisExpression() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(THIS);
               n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new ThisExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ArrayAllocationExpression ArrayAllocationExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Exp n6;
   NodeToken n7;
   Token n8;
    n1 = jj_consume_token(NEW);
              n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(INTEGER);
              n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(LSQPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
    n6 = Exp();
    n8 = jj_consume_token(RSQPAREN);
            n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new ArrayAllocationExpression(n0,n2,n4,n6,n7);}
    throw new Error("Missing return statement in function");
  }

  final public AllocationExpression AllocationExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
    n1 = jj_consume_token(NEW);
              n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier();
    n4 = jj_consume_token(LPAREN);
            n3 = JTBToolkit.makeNodeToken(n4);
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new AllocationExpression(n0,n2,n3,n5);}
    throw new Error("Missing return statement in function");
  }

  final public NotExpression NotExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   Exp n2;
    n1 = jj_consume_token(NOT);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Exp();
     {if (true) return new NotExpression(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public BracketExpression BracketExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   Exp n2;
   NodeToken n3;
   Token n4;
    n1 = jj_consume_token(LPAREN);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Exp();
    n4 = jj_consume_token(RPAREN);
            n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new BracketExpression(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  final private boolean jj_3R_40() {
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_scan_token(CHAR_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_22()) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(DIV)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_21() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_51()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_52()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3_25() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_3R_26()) return true;
    if (jj_scan_token(LSQPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(LSQPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_3R_88()) return true;
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(SEQU)) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_3R_39()) return true;
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(GEQU)) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_3R_49()) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_3R_86()) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(NEQU)) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_3R_85()) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    }
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(EQU)) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_3R_84()) return true;
    return false;
  }

  final private boolean jj_3R_23() {
    if (jj_3R_26()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  final private boolean jj_3_26() {
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(LT)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(MOD)) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_3R_82()) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(DIV)) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_3R_81()) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(69)) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_3R_80()) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(AND)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_3R_78()) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_55()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(LT)) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_3R_77()) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(OR)) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(AND)) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_3R_75()) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(OR)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_scan_token(58)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_3R_73()) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(SEQU)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_3R_92()) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_scan_token(PUBLIC)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_3R_55()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_91()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_24()) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(GEQU)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_23()) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(INTEGER)) return true;
    if (jj_scan_token(LSQPAREN)) return true;
    if (jj_3R_55()) return true;
    if (jj_scan_token(RSQPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_89()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(NEQU)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    if (jj_3R_29()) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_scan_token(MINIDRAW)) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(EQU)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(LSQPAREN)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(RSQPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_scan_token(INTEGER)) return true;
    if (jj_scan_token(LSQPAREN)) return true;
    if (jj_scan_token(RSQPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(MOD)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(69)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_3R_54()) return true;
    return false;
  }

  public MiniJavaParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[24];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0x80000000,0x0,0x402200,0x0,0x80000000,0x0,0x80000000,0x0,0x80000000,0x402200,0x0,0x80000000,0x2000,0x400200,0x402200,0x0,0x0,0x0,0x400200,0x400200,0x0,0x0,0x400200,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x200,0x400001,0x2,0xfa7ed000,0x200,0x400001,0x2,0x400001,0x2,0x400001,0xfa7ed000,0x4000000,0x400001,0x0,0xfa7ed000,0xfa7ed000,0x2000,0x18008000,0xe0000000,0x27e0000,0x27e0000,0x4000000,0x7c0000,0x2020000,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x1f,0x0,0x0,0x0,0x0,0x0,0x0,0x1f,0x0,0x0,0x0,0x1f,0x1f,0x0,0x0,0x1f,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[26];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public MiniJavaParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public MiniJavaParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MiniJavaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public MiniJavaParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MiniJavaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public MiniJavaParser(MiniJavaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(MiniJavaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[70];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 24; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 70; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 26; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}

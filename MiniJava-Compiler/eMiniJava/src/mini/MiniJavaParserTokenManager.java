/* Generated By:JavaCC: Do not edit this line. MiniJavaParserTokenManager.java */
package mini;
import mini.syntaxtree.*;
import mini.visitor.*;
import java.util.Vector;

public @SuppressWarnings("all") class MiniJavaParserTokenManager implements MiniJavaParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xf81fffff80000000L) != 0L || (active1 & 0x1fL) != 0L)
         {
            jjmatchedKind = 54;
            return 4;
         }
         if ((active0 & 0x800000L) != 0L)
            return 9;
         return -1;
      case 1:
         if ((active0 & 0x100000000000L) != 0L)
            return 4;
         if ((active0 & 0xf81fefff80000000L) != 0L || (active1 & 0x1fL) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 1;
            return 4;
         }
         return -1;
      case 2:
         if ((active0 & 0x2000100000000L) != 0L)
            return 4;
         if ((active0 & 0xf81deffe80000000L) != 0L || (active1 & 0x1fL) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 2;
            return 4;
         }
         return -1;
      case 3:
         if ((active0 & 0xc201400000000L) != 0L)
            return 4;
         if ((active0 & 0xf811cfea80000000L) != 0L || (active1 & 0x1fL) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 3;
            return 4;
         }
         return -1;
      case 4:
         if ((active0 & 0x10430000000000L) != 0L)
            return 4;
         if ((active0 & 0xf8018cea80000000L) != 0L || (active1 & 0x1fL) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 4;
            return 4;
         }
         return -1;
      case 5:
         if ((active0 & 0x1082a00000000L) != 0L)
            return 4;
         if ((active0 & 0xf80084c080000000L) != 0L || (active1 & 0x1fL) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 5;
            return 4;
         }
         return -1;
      case 6:
         if ((active0 & 0x40080000000L) != 0L)
            return 4;
         if ((active0 & 0x800000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0xf80000c000000000L) != 0L || (active1 & 0x1fL) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 6;
            return 4;
         }
         return -1;
      case 7:
         if ((active0 & 0x8000000000L) != 0L)
            return 4;
         if ((active0 & 0x800000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0xf800004000000000L) != 0L || (active1 & 0x1fL) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 7;
            return 4;
         }
         return -1;
      case 8:
         if ((active0 & 0xf800000000000000L) != 0L || (active1 & 0x1fL) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x800000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 8;
            return 4;
         }
         return -1;
      case 9:
         if ((active0 & 0xf800000000000000L) != 0L || (active1 & 0x1fL) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x800000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 9;
            return 4;
         }
         return -1;
      case 10:
         if ((active0 & 0xf800000000000000L) != 0L || (active1 & 0x1fL) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x800000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 10;
            return 4;
         }
         return -1;
      case 11:
         if ((active0 & 0xf800000000000000L) != 0L || (active1 & 0x1fL) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x800000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 11;
            return 4;
         }
         return -1;
      case 12:
         if ((active0 & 0xf800000000000000L) != 0L || (active1 & 0x1fL) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x800000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 12;
            return 4;
         }
         return -1;
      case 13:
         if ((active0 & 0x4000000000L) != 0L)
            return 4;
         if ((active0 & 0x7800000000000000L) != 0L || (active1 & 0x1dL) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x800000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 14:
         if ((active0 & 0x2000000000000000L) != 0L || (active1 & 0x15L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x800000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 15:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x800000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 16:
         if ((active0 & 0x800000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 22;
         return jjMoveStringLiteralDfa1_0(0x8000000L, 0x0L);
      case 37:
         return jjStopAtPos(0, 24);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x200000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 9);
      case 41:
         return jjStopAtPos(0, 10);
      case 42:
         return jjStopAtPos(0, 69);
      case 43:
         return jjStopAtPos(0, 19);
      case 44:
         return jjStopAtPos(0, 58);
      case 45:
         return jjStopAtPos(0, 20);
      case 46:
         return jjStopAtPos(0, 16);
      case 47:
         return jjStartNfaWithStates_0(0, 23, 9);
      case 59:
         return jjStopAtPos(0, 15);
      case 60:
         jjmatchedKind = 18;
         return jjMoveStringLiteralDfa1_0(0x20000000L, 0x0L);
      case 61:
         jjmatchedKind = 17;
         return jjMoveStringLiteralDfa1_0(0x4000000L, 0x0L);
      case 62:
         jjmatchedKind = 25;
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0xf80000c000000000L, 0x1fL);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x802000000000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 11);
      case 93:
         return jjStopAtPos(0, 12);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x80000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x240000000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x10010000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x100100000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x2000000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x200000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0xc000000000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 13);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x40000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 14);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(1, 21);
         break;
      case 61:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 26);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 27);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 28);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 29);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x10001000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x3084000000000L, active1, 0L);
      case 102:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 44, 4);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x4400000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0xf800018000000000L, active1, 0x1fL);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x220000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x480000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x2800000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L, active1, 0L);
      case 124:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x20800000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x4401400000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0xf801018000000000L, active1, 0x1fL);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0xa04000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 32, 4);
         return jjMoveStringLiteralDfa3_0(active0, 0xc0000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000L, active1, 0L);
      case 119:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 49, 4);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L, active1, 0L);
      case 100:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 4);
         break;
      case 101:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 45, 4);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 51, 4);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0xf80000a000000000L, active1, 0x1fL);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x400280000000L, active1, 0L);
      case 110:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 4);
         break;
      case 115:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 50, 4);
         return jjMoveStringLiteralDfa4_0(active0, 0x10024000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x800800000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 46, 4);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 52, 4);
         return jjMoveStringLiteralDfa5_0(active0, 0x800080000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0xa00000000L, active1, 0L);
      case 106:
         return jjMoveStringLiteralDfa5_0(active0, 0xf800000000000000L, active1, 0x1fL);
      case 108:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 40, 4);
         break;
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x42000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 41, 4);
         break;
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0xf800000080000000L, active1, 0x1fL);
      case 99:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 33, 4);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 35, 4);
         break;
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L, active1, 0L);
      case 103:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 37, 4);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L, active1, 0L);
      case 104:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 48, 4);
         break;
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 43, 4);
         break;
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 31, 4);
         break;
      case 115:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 42, 4);
         break;
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0xf800000000000000L, active1, 0x1fL);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 72:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0xf800000000000000L, active1, 0x1fL);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000L, active1, 0L);
      case 119:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 39, 4);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa9_0(active0, 0xf800000000000000L, active1, 0x1fL);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x10L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8L);
      case 103:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0x2800000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa10_0(active0, 0x5000000000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x3L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000000000L, active1, 0x2L);
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x4L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x11L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x8L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x6800000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x5000000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000000000000L, active1, 0x2L);
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000000L, active1, 0x8L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000000000000L, active1, 0x1L);
      case 112:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x14L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1);
      return 12;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x10L);
      case 100:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(12, 63);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x1L);
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000000000L, active1, 0L);
      case 107:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x4L);
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0x5800000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x8L);
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000000000000L, active1, 0L);
      case 116:
         if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(12, 65);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1);
      return 13;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(13, 62);
         break;
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000000000000000L, active1, 0x4L);
      case 102:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(13, 60);
         break;
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0x800000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x10L);
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x1L);
      case 114:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 38, 4);
         else if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(13, 67);
         break;
      case 116:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(13, 59);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(12, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1);
      return 14;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa15_0(active0, 0x2000800000000000L, active1, 0L);
      case 116:
         if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(14, 68);
         break;
      case 119:
         if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(14, 64);
         break;
      case 121:
         if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(14, 66);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(13, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 116:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(15, 61);
         return jjMoveStringLiteralDfa16_0(active0, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L);
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa17_0(active0, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L);
}
private final int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(17, 47);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 27;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 9:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(22, 23);
                  else if (curChar == 47)
                  {
                     if (kind > 6)
                        kind = 6;
                     jjCheckNAddStates(0, 2);
                  }
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 0:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                     jjCheckNAdd(1);
                  }
                  else if (curChar == 47)
                     jjAddStates(3, 5);
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if (curChar == 48)
                  {
                     if (kind > 53)
                        kind = 53;
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if (curChar == 48 && kind > 53)
                     kind = 53;
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 5:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 7:
                  if (curChar == 39 && kind > 57)
                     kind = 57;
                  break;
               case 8:
                  if (curChar == 47)
                     jjAddStates(3, 5);
                  break;
               case 10:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAddStates(0, 2);
                  break;
               case 11:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 12:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 13:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(15, 16);
                  break;
               case 15:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(15, 16);
                  break;
               case 16:
                  if (curChar == 42)
                     jjCheckNAddStates(6, 8);
                  break;
               case 17:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(18, 16);
                  break;
               case 18:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(18, 16);
                  break;
               case 19:
                  if (curChar == 47 && kind > 7)
                     kind = 7;
                  break;
               case 20:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 21:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 22:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 23:
                  if (curChar == 42)
                     jjCheckNAddStates(9, 11);
                  break;
               case 24:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(25, 23);
                  break;
               case 25:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(25, 23);
                  break;
               case 26:
                  if (curChar == 47 && kind > 8)
                     kind = 8;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 4:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  jjCheckNAdd(4);
                  break;
               case 6:
                  jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 10:
                  if (kind > 6)
                     kind = 6;
                  jjAddStates(0, 2);
                  break;
               case 15:
                  jjCheckNAddTwoStates(15, 16);
                  break;
               case 17:
               case 18:
                  jjCheckNAddTwoStates(18, 16);
                  break;
               case 22:
                  jjCheckNAddTwoStates(22, 23);
                  break;
               case 24:
               case 25:
                  jjCheckNAddTwoStates(25, 23);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 6:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 10:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjAddStates(0, 2);
                  break;
               case 15:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(15, 16);
                  break;
               case 17:
               case 18:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(18, 16);
                  break;
               case 22:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 24:
               case 25:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(25, 23);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 27 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   10, 11, 13, 9, 20, 21, 16, 17, 19, 23, 24, 26, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, "\50", "\51", "\133", 
"\135", "\173", "\175", "\73", "\56", "\75", "\74", "\53", "\55", "\46\46", "\41", 
"\57", "\45", "\76", "\75\75", "\41\75", "\76\75", "\74\75", "\174\174", 
"\142\157\157\154\145\141\156", "\151\156\164", "\160\165\142\154\151\143", "\166\157\151\144", 
"\163\164\141\164\151\143", "\155\141\151\156", "\123\164\162\151\156\147", 
"\115\145\163\163\141\147\145\110\141\156\144\154\145\162", "\115\151\156\151\104\162\141\167", "\146\151\156\141\154", 
"\143\154\141\163\163", "\145\170\164\145\156\144\163", "\162\145\164\165\162\156", "\151\146", 
"\145\154\163\145", "\167\150\151\154\145", 
"\123\171\163\164\145\155\56\157\165\164\56\160\162\151\156\164\154\156", "\154\145\156\147\164\150", "\156\145\167", "\164\150\151\163", 
"\164\162\165\145", "\146\141\154\163\145", null, null, null, null, null, "\54", 
"\115\151\156\151\152\141\166\141\56\160\162\151\156\164", "\115\151\156\151\152\141\166\141\56\163\143\141\156\146", 
"\115\151\156\151\152\141\166\141\56\160\162\145\163\145\156\164", "\115\151\156\151\152\141\166\141\56\163\162\141\156\144", 
"\115\151\156\151\152\141\166\141\56\162\141\156\144", "\115\151\156\151\152\141\166\141\56\167\151\156\144\157\167", 
"\115\151\156\151\152\141\166\141\56\167\141\151\164", "\115\151\156\151\152\141\166\141\56\147\145\164\153\145\171", 
"\115\151\156\151\152\141\166\141\56\143\157\154\157\162", "\115\151\156\151\152\141\166\141\56\142\151\164\142\154\164", "\52", };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xfe7ffffffffffe01L, 0x3fL, 
};
static final long[] jjtoSkip = {
   0x1feL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x1c0L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[27];
private final int[] jjstateSet = new int[54];
protected char curChar;
public MiniJavaParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public MiniJavaParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 27; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}

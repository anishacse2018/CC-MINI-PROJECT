//
// Generated by JTB 1.3.2
//

package mini.syntaxtree;

/**
 * Grammar production:
 * nodeToken -> "if"
 * nodeToken1 -> "("
 * exp -> Exp()
 * nodeToken2 -> ")"
 * statement -> Statement()
 * nodeOptional -> [ ElseStatement() ]
 */
public @SuppressWarnings("all") class IfStatement implements Node {
   private Node parent;
   public NodeToken nodeToken;
   public NodeToken nodeToken1;
   public Exp exp;
   public NodeToken nodeToken2;
   public Statement statement;
   public NodeOptional nodeOptional;

   public IfStatement(NodeToken n0, NodeToken n1, Exp n2, NodeToken n3, Statement n4, NodeOptional n5) {
      nodeToken = n0;
      if ( nodeToken != null ) nodeToken.setParent(this);
      nodeToken1 = n1;
      if ( nodeToken1 != null ) nodeToken1.setParent(this);
      exp = n2;
      if ( exp != null ) exp.setParent(this);
      nodeToken2 = n3;
      if ( nodeToken2 != null ) nodeToken2.setParent(this);
      statement = n4;
      if ( statement != null ) statement.setParent(this);
      nodeOptional = n5;
      if ( nodeOptional != null ) nodeOptional.setParent(this);
   }

   public IfStatement(Exp n0, Statement n1, NodeOptional n2) {
      nodeToken = new NodeToken("if");
      if ( nodeToken != null ) nodeToken.setParent(this);
      nodeToken1 = new NodeToken("(");
      if ( nodeToken1 != null ) nodeToken1.setParent(this);
      exp = n0;
      if ( exp != null ) exp.setParent(this);
      nodeToken2 = new NodeToken(")");
      if ( nodeToken2 != null ) nodeToken2.setParent(this);
      statement = n1;
      if ( statement != null ) statement.setParent(this);
      nodeOptional = n2;
      if ( nodeOptional != null ) nodeOptional.setParent(this);
   }

   public void accept(mini.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(mini.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(mini.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(mini.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
   public void setParent(Node n) { parent = n; }
   public Node getParent()       { return parent; }
}


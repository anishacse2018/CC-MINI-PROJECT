//
// Generated by JTB 1.3.2
//

package mini.syntaxtree;

/**
 * Grammar production:
 * nodeToken -> "public"
 * nodeToken1 -> "final"
 * nodeToken2 -> "int"
 * nodeToken3 -> "MessageHandler"
 * nodeToken4 -> "("
 * arrayType -> ArrayType()
 * identifier -> Identifier()
 * nodeToken5 -> ","
 * integerType -> IntegerType()
 * identifier1 -> Identifier()
 * nodeToken6 -> ")"
 * nodeToken7 -> "{"
 * nodeListOptional -> ( VarDecl() )*
 * nodeListOptional1 -> ( Statement() )*
 * nodeToken8 -> "return"
 * exp -> Exp()
 * nodeToken9 -> ";"
 * nodeToken10 -> "}"
 */
public @SuppressWarnings("all") class MessageHandler implements Node {
   private Node parent;
   public NodeToken nodeToken;
   public NodeToken nodeToken1;
   public NodeToken nodeToken2;
   public NodeToken nodeToken3;
   public NodeToken nodeToken4;
   public ArrayType arrayType;
   public Identifier identifier;
   public NodeToken nodeToken5;
   public IntegerType integerType;
   public Identifier identifier1;
   public NodeToken nodeToken6;
   public NodeToken nodeToken7;
   public NodeListOptional nodeListOptional;
   public NodeListOptional nodeListOptional1;
   public NodeToken nodeToken8;
   public Exp exp;
   public NodeToken nodeToken9;
   public NodeToken nodeToken10;

   public MessageHandler(NodeToken n0, NodeToken n1, NodeToken n2, NodeToken n3, NodeToken n4, ArrayType n5, Identifier n6, NodeToken n7, IntegerType n8, Identifier n9, NodeToken n10, NodeToken n11, NodeListOptional n12, NodeListOptional n13, NodeToken n14, Exp n15, NodeToken n16, NodeToken n17) {
      nodeToken = n0;
      if ( nodeToken != null ) nodeToken.setParent(this);
      nodeToken1 = n1;
      if ( nodeToken1 != null ) nodeToken1.setParent(this);
      nodeToken2 = n2;
      if ( nodeToken2 != null ) nodeToken2.setParent(this);
      nodeToken3 = n3;
      if ( nodeToken3 != null ) nodeToken3.setParent(this);
      nodeToken4 = n4;
      if ( nodeToken4 != null ) nodeToken4.setParent(this);
      arrayType = n5;
      if ( arrayType != null ) arrayType.setParent(this);
      identifier = n6;
      if ( identifier != null ) identifier.setParent(this);
      nodeToken5 = n7;
      if ( nodeToken5 != null ) nodeToken5.setParent(this);
      integerType = n8;
      if ( integerType != null ) integerType.setParent(this);
      identifier1 = n9;
      if ( identifier1 != null ) identifier1.setParent(this);
      nodeToken6 = n10;
      if ( nodeToken6 != null ) nodeToken6.setParent(this);
      nodeToken7 = n11;
      if ( nodeToken7 != null ) nodeToken7.setParent(this);
      nodeListOptional = n12;
      if ( nodeListOptional != null ) nodeListOptional.setParent(this);
      nodeListOptional1 = n13;
      if ( nodeListOptional1 != null ) nodeListOptional1.setParent(this);
      nodeToken8 = n14;
      if ( nodeToken8 != null ) nodeToken8.setParent(this);
      exp = n15;
      if ( exp != null ) exp.setParent(this);
      nodeToken9 = n16;
      if ( nodeToken9 != null ) nodeToken9.setParent(this);
      nodeToken10 = n17;
      if ( nodeToken10 != null ) nodeToken10.setParent(this);
   }

   public MessageHandler(ArrayType n0, Identifier n1, IntegerType n2, Identifier n3, NodeListOptional n4, NodeListOptional n5, Exp n6) {
      nodeToken = new NodeToken("public");
      if ( nodeToken != null ) nodeToken.setParent(this);
      nodeToken1 = new NodeToken("final");
      if ( nodeToken1 != null ) nodeToken1.setParent(this);
      nodeToken2 = new NodeToken("int");
      if ( nodeToken2 != null ) nodeToken2.setParent(this);
      nodeToken3 = new NodeToken("MessageHandler");
      if ( nodeToken3 != null ) nodeToken3.setParent(this);
      nodeToken4 = new NodeToken("(");
      if ( nodeToken4 != null ) nodeToken4.setParent(this);
      arrayType = n0;
      if ( arrayType != null ) arrayType.setParent(this);
      identifier = n1;
      if ( identifier != null ) identifier.setParent(this);
      nodeToken5 = new NodeToken(",");
      if ( nodeToken5 != null ) nodeToken5.setParent(this);
      integerType = n2;
      if ( integerType != null ) integerType.setParent(this);
      identifier1 = n3;
      if ( identifier1 != null ) identifier1.setParent(this);
      nodeToken6 = new NodeToken(")");
      if ( nodeToken6 != null ) nodeToken6.setParent(this);
      nodeToken7 = new NodeToken("{");
      if ( nodeToken7 != null ) nodeToken7.setParent(this);
      nodeListOptional = n4;
      if ( nodeListOptional != null ) nodeListOptional.setParent(this);
      nodeListOptional1 = n5;
      if ( nodeListOptional1 != null ) nodeListOptional1.setParent(this);
      nodeToken8 = new NodeToken("return");
      if ( nodeToken8 != null ) nodeToken8.setParent(this);
      exp = n6;
      if ( exp != null ) exp.setParent(this);
      nodeToken9 = new NodeToken(";");
      if ( nodeToken9 != null ) nodeToken9.setParent(this);
      nodeToken10 = new NodeToken("}");
      if ( nodeToken10 != null ) nodeToken10.setParent(this);
   }

   public void accept(mini.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(mini.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(mini.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(mini.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
   public void setParent(Node n) { parent = n; }
   public Node getParent()       { return parent; }
}


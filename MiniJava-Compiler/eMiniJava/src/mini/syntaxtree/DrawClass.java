//
// Generated by JTB 1.3.2
//

package mini.syntaxtree;

/**
 * Grammar production:
 * nodeToken -> "class"
 * identifier -> Identifier()
 * nodeToken1 -> "extends"
 * nodeToken2 -> "MiniDraw"
 * nodeToken3 -> "{"
 * nodeListOptional -> ( VarDecl() )*
 * nodeListOptional1 -> ( MethodDecl() )*
 * messageHandler -> MessageHandler()
 * nodeListOptional2 -> ( MethodDecl() )*
 * nodeToken4 -> "}"
 */
public @SuppressWarnings("all") class DrawClass implements Node {
   private Node parent;
   public NodeToken nodeToken;
   public Identifier identifier;
   public NodeToken nodeToken1;
   public NodeToken nodeToken2;
   public NodeToken nodeToken3;
   public NodeListOptional nodeListOptional;
   public NodeListOptional nodeListOptional1;
   public MessageHandler messageHandler;
   public NodeListOptional nodeListOptional2;
   public NodeToken nodeToken4;

   public DrawClass(NodeToken n0, Identifier n1, NodeToken n2, NodeToken n3, NodeToken n4, NodeListOptional n5, NodeListOptional n6, MessageHandler n7, NodeListOptional n8, NodeToken n9) {
      nodeToken = n0;
      if ( nodeToken != null ) nodeToken.setParent(this);
      identifier = n1;
      if ( identifier != null ) identifier.setParent(this);
      nodeToken1 = n2;
      if ( nodeToken1 != null ) nodeToken1.setParent(this);
      nodeToken2 = n3;
      if ( nodeToken2 != null ) nodeToken2.setParent(this);
      nodeToken3 = n4;
      if ( nodeToken3 != null ) nodeToken3.setParent(this);
      nodeListOptional = n5;
      if ( nodeListOptional != null ) nodeListOptional.setParent(this);
      nodeListOptional1 = n6;
      if ( nodeListOptional1 != null ) nodeListOptional1.setParent(this);
      messageHandler = n7;
      if ( messageHandler != null ) messageHandler.setParent(this);
      nodeListOptional2 = n8;
      if ( nodeListOptional2 != null ) nodeListOptional2.setParent(this);
      nodeToken4 = n9;
      if ( nodeToken4 != null ) nodeToken4.setParent(this);
   }

   public DrawClass(Identifier n0, NodeListOptional n1, NodeListOptional n2, MessageHandler n3, NodeListOptional n4) {
      nodeToken = new NodeToken("class");
      if ( nodeToken != null ) nodeToken.setParent(this);
      identifier = n0;
      if ( identifier != null ) identifier.setParent(this);
      nodeToken1 = new NodeToken("extends");
      if ( nodeToken1 != null ) nodeToken1.setParent(this);
      nodeToken2 = new NodeToken("MiniDraw");
      if ( nodeToken2 != null ) nodeToken2.setParent(this);
      nodeToken3 = new NodeToken("{");
      if ( nodeToken3 != null ) nodeToken3.setParent(this);
      nodeListOptional = n1;
      if ( nodeListOptional != null ) nodeListOptional.setParent(this);
      nodeListOptional1 = n2;
      if ( nodeListOptional1 != null ) nodeListOptional1.setParent(this);
      messageHandler = n3;
      if ( messageHandler != null ) messageHandler.setParent(this);
      nodeListOptional2 = n4;
      if ( nodeListOptional2 != null ) nodeListOptional2.setParent(this);
      nodeToken4 = new NodeToken("}");
      if ( nodeToken4 != null ) nodeToken4.setParent(this);
   }

   public void accept(mini.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(mini.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(mini.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(mini.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
   public void setParent(Node n) { parent = n; }
   public Node getParent()       { return parent; }
}


//
// Generated by JTB 1.3.2
//

package mini.syntaxtree;

/**
 * Grammar production:
 * nodeToken -> "class"
 * identifier -> Identifier()
 * nodeToken1 -> "{"
 * nodeToken2 -> "public"
 * nodeToken3 -> "static"
 * nodeToken4 -> "void"
 * nodeToken5 -> "main"
 * nodeToken6 -> "("
 * nodeToken7 -> "String"
 * nodeToken8 -> "["
 * nodeToken9 -> "]"
 * identifier1 -> Identifier()
 * nodeToken10 -> ")"
 * nodeToken11 -> "{"
 * ioStatement -> IoStatement()
 * nodeToken12 -> "}"
 * nodeToken13 -> "}"
 */
public @SuppressWarnings("all") class MainClass implements Node {
   private Node parent;
   public NodeToken nodeToken;
   public Identifier identifier;
   public NodeToken nodeToken1;
   public NodeToken nodeToken2;
   public NodeToken nodeToken3;
   public NodeToken nodeToken4;
   public NodeToken nodeToken5;
   public NodeToken nodeToken6;
   public NodeToken nodeToken7;
   public NodeToken nodeToken8;
   public NodeToken nodeToken9;
   public Identifier identifier1;
   public NodeToken nodeToken10;
   public NodeToken nodeToken11;
   public IoStatement ioStatement;
   public NodeToken nodeToken12;
   public NodeToken nodeToken13;

   public MainClass(NodeToken n0, Identifier n1, NodeToken n2, NodeToken n3, NodeToken n4, NodeToken n5, NodeToken n6, NodeToken n7, NodeToken n8, NodeToken n9, NodeToken n10, Identifier n11, NodeToken n12, NodeToken n13, IoStatement n14, NodeToken n15, NodeToken n16) {
      nodeToken = n0;
      if ( nodeToken != null ) nodeToken.setParent(this);
      identifier = n1;
      if ( identifier != null ) identifier.setParent(this);
      nodeToken1 = n2;
      if ( nodeToken1 != null ) nodeToken1.setParent(this);
      nodeToken2 = n3;
      if ( nodeToken2 != null ) nodeToken2.setParent(this);
      nodeToken3 = n4;
      if ( nodeToken3 != null ) nodeToken3.setParent(this);
      nodeToken4 = n5;
      if ( nodeToken4 != null ) nodeToken4.setParent(this);
      nodeToken5 = n6;
      if ( nodeToken5 != null ) nodeToken5.setParent(this);
      nodeToken6 = n7;
      if ( nodeToken6 != null ) nodeToken6.setParent(this);
      nodeToken7 = n8;
      if ( nodeToken7 != null ) nodeToken7.setParent(this);
      nodeToken8 = n9;
      if ( nodeToken8 != null ) nodeToken8.setParent(this);
      nodeToken9 = n10;
      if ( nodeToken9 != null ) nodeToken9.setParent(this);
      identifier1 = n11;
      if ( identifier1 != null ) identifier1.setParent(this);
      nodeToken10 = n12;
      if ( nodeToken10 != null ) nodeToken10.setParent(this);
      nodeToken11 = n13;
      if ( nodeToken11 != null ) nodeToken11.setParent(this);
      ioStatement = n14;
      if ( ioStatement != null ) ioStatement.setParent(this);
      nodeToken12 = n15;
      if ( nodeToken12 != null ) nodeToken12.setParent(this);
      nodeToken13 = n16;
      if ( nodeToken13 != null ) nodeToken13.setParent(this);
   }

   public MainClass(Identifier n0, Identifier n1, IoStatement n2) {
      nodeToken = new NodeToken("class");
      if ( nodeToken != null ) nodeToken.setParent(this);
      identifier = n0;
      if ( identifier != null ) identifier.setParent(this);
      nodeToken1 = new NodeToken("{");
      if ( nodeToken1 != null ) nodeToken1.setParent(this);
      nodeToken2 = new NodeToken("public");
      if ( nodeToken2 != null ) nodeToken2.setParent(this);
      nodeToken3 = new NodeToken("static");
      if ( nodeToken3 != null ) nodeToken3.setParent(this);
      nodeToken4 = new NodeToken("void");
      if ( nodeToken4 != null ) nodeToken4.setParent(this);
      nodeToken5 = new NodeToken("main");
      if ( nodeToken5 != null ) nodeToken5.setParent(this);
      nodeToken6 = new NodeToken("(");
      if ( nodeToken6 != null ) nodeToken6.setParent(this);
      nodeToken7 = new NodeToken("String");
      if ( nodeToken7 != null ) nodeToken7.setParent(this);
      nodeToken8 = new NodeToken("[");
      if ( nodeToken8 != null ) nodeToken8.setParent(this);
      nodeToken9 = new NodeToken("]");
      if ( nodeToken9 != null ) nodeToken9.setParent(this);
      identifier1 = n1;
      if ( identifier1 != null ) identifier1.setParent(this);
      nodeToken10 = new NodeToken(")");
      if ( nodeToken10 != null ) nodeToken10.setParent(this);
      nodeToken11 = new NodeToken("{");
      if ( nodeToken11 != null ) nodeToken11.setParent(this);
      ioStatement = n2;
      if ( ioStatement != null ) ioStatement.setParent(this);
      nodeToken12 = new NodeToken("}");
      if ( nodeToken12 != null ) nodeToken12.setParent(this);
      nodeToken13 = new NodeToken("}");
      if ( nodeToken13 != null ) nodeToken13.setParent(this);
   }

   public void accept(mini.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(mini.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(mini.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(mini.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
   public void setParent(Node n) { parent = n; }
   public Node getParent()       { return parent; }
}


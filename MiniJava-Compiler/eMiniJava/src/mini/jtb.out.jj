//
// Generated by JTB 1.3.2
//

options {
   STATIC = false;
}

PARSER_BEGIN(MiniJavaParser)
package mini;

import mini.syntaxtree.*;
import mini.visitor.*;
import java.util.Vector;


public class MiniJavaParser 
{
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(MiniJavaParser)

SKIP :
{
   " "
   | "\t"
   | "\n"
   | "\r"
   | "\f"
}

SPECIAL_TOKEN :
{
   <SINGLE_LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")?>
   | <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*", "/"] (~["*"])* "*"))* "/">
   | <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*", "/"] (~["*"])* "*"))* "/">
}

TOKEN :
{
   <LPAREN: "(">
   | <RPAREN: ")">
   | <LSQPAREN: "[">
   | <RSQPAREN: "]">
   | <LBRACE: "{">
   | <RBRACE: "}">
   | <SEMICOLON: ";">
   | <DOT: ".">
   | <ASSIGN: "=">
   | <LT: "<">
   | <PLUS: "+">
   | <MINUS: "-">
   | <AND: "&&">
   | <NOT: "!">
   | <DIV: "/">
   | <MOD: "%">
   | <GT: ">">
   | <EQU: "==">
   | <NEQU: "!=">
   | <GEQU: ">=">
   | <SEQU: "<=">
   | <OR: "||">
   | <BOOLEAN: "boolean">
   | <INTEGER: "int">
   | <PUBLIC: "public">
   | <VOID: "void">
   | <STATIC: "static">
   | <MAIN: "main">
   | <STRING: "String">
   | <MESSAGEHANDLER: "MessageHandler">
   | <MINIDRAW: "MiniDraw">
   | <FINAL: "final">
   | <CLASS: "class">
   | <EXTENDS: "extends">
   | <RETURN: "return">
   | <IF: "if">
   | <ELSE: "else">
   | <WHILE: "while">
   | <PRINT: "System.out.println">
   | <LENGTH: "length">
   | <NEW: "new">
   | <THIS: "this">
   | <TRUE: "true">
   | <FALSE: "false">
}

TOKEN :
{
   <INTEGER_LITERAL: (["1"-"9"] (["0"-"9"])* | "0")>
}

TOKEN :
{
   <IDENTIFIER:  <LETTER> (<LETTER> | <DIGIT>)*>
   | <#LETTER: ["a"-"z", "A"-"Z", "_"]>
   | <#DIGIT: ["0"-"9"]>
}

TOKEN :
{
   <CHAR_LITERAL: "'" (~["\n", "\r"]) "'">
}

Program Program() :
{
   MainClass n0;
   NodeListOptional n1 = new NodeListOptional();
   ClassDecl n2;
   NodeOptional n3 = new NodeOptional();
   DrawClass n4;
   NodeListOptional n5 = new NodeListOptional();
   ClassDecl n6;
   NodeToken n7;
   Token n8;

   
}
{
   n0=MainClass()
   (
      LOOKAHEAD(4)
      n2=ClassDecl()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   (
      LOOKAHEAD(4)
      n4=DrawClass()
      { n3.addNode(n4); }
   )?
   (
      n6=ClassDecl()
      { n5.addNode(n6); }
   )*
   { n5.nodes.trimToSize(); }
   n8=<EOF> { 
      n8.beginColumn++; n8.endColumn++;
      n7 = JTBToolkit.makeNodeToken(n8);
   }
   
   { return new Program(n0,n1,n3,n5,n7); }
}

MainClass MainClass() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   Identifier n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   IoStatement n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;

   
}
{
   n1="class" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   n4="{" { n3 = JTBToolkit.makeNodeToken(n4); }
   n6="public" { n5 = JTBToolkit.makeNodeToken(n6); }
   n8="static" { n7 = JTBToolkit.makeNodeToken(n8); }
   n10="void" { n9 = JTBToolkit.makeNodeToken(n10); }
   n12="main" { n11 = JTBToolkit.makeNodeToken(n12); }
   n14="(" { n13 = JTBToolkit.makeNodeToken(n14); }
   n16="String" { n15 = JTBToolkit.makeNodeToken(n16); }
   n18="[" { n17 = JTBToolkit.makeNodeToken(n18); }
   n20="]" { n19 = JTBToolkit.makeNodeToken(n20); }
   n21=Identifier()
   n23=")" { n22 = JTBToolkit.makeNodeToken(n23); }
   n25="{" { n24 = JTBToolkit.makeNodeToken(n25); }
   n26=IoStatement()
   n28="}" { n27 = JTBToolkit.makeNodeToken(n28); }
   n30="}" { n29 = JTBToolkit.makeNodeToken(n30); }
   
   { return new MainClass(n0,n2,n3,n5,n7,n9,n11,n13,n15,n17,n19,n21,n22,n24,n26,n27,n29); }
}

DrawClass DrawClass() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeListOptional n9 = new NodeListOptional();
   VarDecl n10;
   NodeListOptional n11 = new NodeListOptional();
   MethodDecl n12;
   MessageHandler n13;
   NodeListOptional n14 = new NodeListOptional();
   MethodDecl n15;
   NodeToken n16;
   Token n17;

   
}
{
   n1="class" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   n4="extends" { n3 = JTBToolkit.makeNodeToken(n4); }
   n6="MiniDraw" { n5 = JTBToolkit.makeNodeToken(n6); }
   n8="{" { n7 = JTBToolkit.makeNodeToken(n8); }
   (
      n10=VarDecl()
      { n9.addNode(n10); }
   )*
   { n9.nodes.trimToSize(); }
   (
      LOOKAHEAD(2)
      n12=MethodDecl()
      { n11.addNode(n12); }
   )*
   { n11.nodes.trimToSize(); }
   n13=MessageHandler()
   (
      n15=MethodDecl()
      { n14.addNode(n15); }
   )*
   { n14.nodes.trimToSize(); }
   n17="}" { n16 = JTBToolkit.makeNodeToken(n17); }
   
   { return new DrawClass(n0,n2,n3,n5,n7,n9,n11,n13,n14,n16); }
}

MessageHandler MessageHandler() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   ArrayType n10;
   Identifier n11;
   NodeToken n12;
   Token n13;
   IntegerType n14;
   Identifier n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeListOptional n20 = new NodeListOptional();
   VarDecl n21;
   NodeListOptional n22 = new NodeListOptional();
   Statement n23;
   NodeToken n24;
   Token n25;
   Exp n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;

   
}
{
   n1="public" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="final" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="int" { n4 = JTBToolkit.makeNodeToken(n5); }
   n7="MessageHandler" { n6 = JTBToolkit.makeNodeToken(n7); }
   n9="(" { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=ArrayType()
   n11=Identifier()
   n13="," { n12 = JTBToolkit.makeNodeToken(n13); }
   n14=IntegerType()
   n15=Identifier()
   n17=")" { n16 = JTBToolkit.makeNodeToken(n17); }
   n19="{" { n18 = JTBToolkit.makeNodeToken(n19); }
   (
      LOOKAHEAD(2)
      n21=VarDecl()
      { n20.addNode(n21); }
   )*
   { n20.nodes.trimToSize(); }
   (
      n23=Statement()
      { n22.addNode(n23); }
   )*
   { n22.nodes.trimToSize(); }
   n25="return" { n24 = JTBToolkit.makeNodeToken(n25); }
   n26=Exp()
   n28=";" { n27 = JTBToolkit.makeNodeToken(n28); }
   n30="}" { n29 = JTBToolkit.makeNodeToken(n30); }
   
   { return new MessageHandler(n0,n2,n4,n6,n8,n10,n11,n12,n14,n15,n16,n18,n20,n22,n24,n26,n27,n29); }
}

ClassDecl ClassDecl() :
{
   NodeChoice n0;
   ClassDeclaration n1;
   ClassExtendsDeclaration n2;

   
}
{
   (
      LOOKAHEAD(3)
      n1=ClassDeclaration()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=ClassExtendsDeclaration()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new ClassDecl(n0); }
}

ClassDeclaration ClassDeclaration() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   NodeListOptional n5 = new NodeListOptional();
   VarDecl n6;
   NodeListOptional n7 = new NodeListOptional();
   MethodDecl n8;
   NodeToken n9;
   Token n10;

   
}
{
   n1="class" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   n4="{" { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      n6=VarDecl()
      { n5.addNode(n6); }
   )*
   { n5.nodes.trimToSize(); }
   (
      n8=MethodDecl()
      { n7.addNode(n8); }
   )*
   { n7.nodes.trimToSize(); }
   n10="}" { n9 = JTBToolkit.makeNodeToken(n10); }
   
   { return new ClassDeclaration(n0,n2,n3,n5,n7,n9); }
}

ClassExtendsDeclaration ClassExtendsDeclaration() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   Identifier n5;
   NodeToken n6;
   Token n7;
   NodeListOptional n8 = new NodeListOptional();
   VarDecl n9;
   NodeListOptional n10 = new NodeListOptional();
   MethodDecl n11;
   NodeToken n12;
   Token n13;

   
}
{
   n1="class" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   n4="extends" { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=Identifier()
   n7="{" { n6 = JTBToolkit.makeNodeToken(n7); }
   (
      n9=VarDecl()
      { n8.addNode(n9); }
   )*
   { n8.nodes.trimToSize(); }
   (
      n11=MethodDecl()
      { n10.addNode(n11); }
   )*
   { n10.nodes.trimToSize(); }
   n13="}" { n12 = JTBToolkit.makeNodeToken(n13); }
   
   { return new ClassExtendsDeclaration(n0,n2,n3,n5,n6,n8,n10,n12); }
}

VarDecl VarDecl() :
{
   Type n0;
   Identifier n1;
   NodeToken n2;
   Token n3;

   
}
{
   n0=Type()
   n1=Identifier()
   n3=";" { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new VarDecl(n0,n1,n2); }
}

MethodDecl MethodDecl() :
{
   NodeToken n0;
   Token n1;
   Type n2;
   Identifier n3;
   NodeToken n4;
   Token n5;
   NodeOptional n6 = new NodeOptional();
   FormalList n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeListOptional n12 = new NodeListOptional();
   VarDecl n13;
   NodeListOptional n14 = new NodeListOptional();
   Statement n15;
   NodeToken n16;
   Token n17;
   Exp n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;

   
}
{
   n1="public" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Type()
   n3=Identifier()
   n5="(" { n4 = JTBToolkit.makeNodeToken(n5); }
   (
      n7=FormalList()
      { n6.addNode(n7); }
   )?
   n9=")" { n8 = JTBToolkit.makeNodeToken(n9); }
   n11="{" { n10 = JTBToolkit.makeNodeToken(n11); }
   (
      LOOKAHEAD(2)
      n13=VarDecl()
      { n12.addNode(n13); }
   )*
   { n12.nodes.trimToSize(); }
   (
      n15=Statement()
      { n14.addNode(n15); }
   )*
   { n14.nodes.trimToSize(); }
   n17="return" { n16 = JTBToolkit.makeNodeToken(n17); }
   n18=Exp()
   n20=";" { n19 = JTBToolkit.makeNodeToken(n20); }
   n22="}" { n21 = JTBToolkit.makeNodeToken(n22); }
   
   { return new MethodDecl(n0,n2,n3,n4,n6,n8,n10,n12,n14,n16,n18,n19,n21); }
}

FormalList FormalList() :
{
   FormalParameter n0;
   NodeListOptional n1 = new NodeListOptional();
   FormalRest n2;

   
}
{
   n0=FormalParameter()
   (
      n2=FormalRest()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new FormalList(n0,n1); }
}

FormalParameter FormalParameter() :
{
   Type n0;
   Identifier n1;

   
}
{
   n0=Type()
   n1=Identifier()
   
   { return new FormalParameter(n0,n1); }
}

FormalRest FormalRest() :
{
   NodeToken n0;
   Token n1;
   FormalParameter n2;

   
}
{
   n1="," { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=FormalParameter()
   
   { return new FormalRest(n0,n2); }
}

Type Type() :
{
   NodeChoice n0;
   ArrayType n1;
   BooleanType n2;
   IntegerType n3;
   Identifier n4;

   
}
{
   (
      LOOKAHEAD(3)
      n1=ArrayType()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=BooleanType()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=IntegerType()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=Identifier()
      { n0 = new NodeChoice(n4, 3); }
   )
   
   { return new Type(n0); }
}

ArrayType ArrayType() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1="int" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="[" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="]" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new ArrayType(n0,n2,n4); }
}

BooleanType BooleanType() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="boolean" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new BooleanType(n0); }
}

IntegerType IntegerType() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="int" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new IntegerType(n0); }
}

Statement Statement() :
{
   NodeChoice n0;
   Block n1;
   AssignmentStatement n2;
   ArrayAssignmentStatement n3;
   IfStatement n4;
   WhileStatement n5;
   ExpStatement n6;
   IoStatement n7;
   GuiStatement n8;

   
}
{
   (
      n1=Block()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(2)
      n2=AssignmentStatement()
      { n0 = new NodeChoice(n2, 1); }
   |
      LOOKAHEAD(2)
      n3=ArrayAssignmentStatement()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=IfStatement()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=WhileStatement()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=ExpStatement()
      { n0 = new NodeChoice(n6, 5); }
   |
      n7=IoStatement()
      { n0 = new NodeChoice(n7, 6); }
   |
      n8=GuiStatement()
      { n0 = new NodeChoice(n8, 7); }
   )
   
   { return new Statement(n0); }
}

ExpStatement ExpStatement() :
{
   Exp n0;
   NodeToken n1;
   Token n2;

   
}
{
   n0=Exp()
   n2=";" { n1 = JTBToolkit.makeNodeToken(n2); }
   
   { return new ExpStatement(n0,n1); }
}

Block Block() :
{
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   Statement n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1="{" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=Statement()
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   n5="}" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new Block(n0,n2,n4); }
}

AssignmentStatement AssignmentStatement() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   Exp n3;
   NodeToken n4;
   Token n5;

   
}
{
   n0=Identifier()
   n2="=" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Exp()
   n5=";" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new AssignmentStatement(n0,n1,n3,n4); }
}

ArrayAssignmentStatement ArrayAssignmentStatement() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   Exp n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   Exp n8;
   NodeToken n9;
   Token n10;

   
}
{
   n0=Identifier()
   n2="[" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Exp()
   n5="]" { n4 = JTBToolkit.makeNodeToken(n5); }
   n7="=" { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=Exp()
   n10=";" { n9 = JTBToolkit.makeNodeToken(n10); }
   
   { return new ArrayAssignmentStatement(n0,n1,n3,n4,n6,n8,n9); }
}

IfStatement IfStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Exp n4;
   NodeToken n5;
   Token n6;
   Statement n7;
   NodeOptional n8 = new NodeOptional();
   ElseStatement n9;

   
}
{
   n1="if" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Exp()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Statement()
   (
      LOOKAHEAD(1)
      n9=ElseStatement()
      { n8.addNode(n9); }
   )?
   
   { return new IfStatement(n0,n2,n4,n5,n7,n8); }
}

ElseStatement ElseStatement() :
{
   NodeToken n0;
   Token n1;
   Statement n2;

   
}
{
   n1="else" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Statement()
   
   { return new ElseStatement(n0,n2); }
}

WhileStatement WhileStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Exp n4;
   NodeToken n5;
   Token n6;
   Statement n7;

   
}
{
   n1="while" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Exp()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Statement()
   
   { return new WhileStatement(n0,n2,n4,n5,n7); }
}

IoStatement IoStatement() :
{
   NodeChoice n0;
   Println n1;
   Print n2;
   Read n3;

   
}
{
   (
      n1=Println()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=Print()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=Read()
      { n0 = new NodeChoice(n3, 2); }
   )
   
   { return new IoStatement(n0); }
}

Println Println() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Exp n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1="System.out.println" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Exp()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=";" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new Println(n0,n2,n4,n5,n7); }
}

Print Print() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Exp n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1="Minijava.print" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Exp()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=";" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new Print(n0,n2,n4,n5,n7); }
}

Read Read() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1="Minijava.scanf" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Identifier()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=";" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new Read(n0,n2,n4,n5,n7); }
}

GuiStatement GuiStatement() :
{
   NodeChoice n0;
   Window n1;
   Wait n2;
   GetKeyState n3;
   Color n4;
   Bitblt n5;
   Present n6;
   Srand n7;
   Rand n8;

   
}
{
   (
      n1=Window()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=Wait()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=GetKeyState()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=Color()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=Bitblt()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=Present()
      { n0 = new NodeChoice(n6, 5); }
   |
      n7=Srand()
      { n0 = new NodeChoice(n7, 6); }
   |
      n8=Rand()
      { n0 = new NodeChoice(n8, 7); }
   )
   
   { return new GuiStatement(n0); }
}

Present Present() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Exp n4;
   NodeToken n5;
   Token n6;
   Exp n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;

   
}
{
   n1="Minijava.present" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Exp()
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Exp()
   n9=")" { n8 = JTBToolkit.makeNodeToken(n9); }
   n11=";" { n10 = JTBToolkit.makeNodeToken(n11); }
   
   { return new Present(n0,n2,n4,n5,n7,n8,n10); }
}

Srand Srand() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Exp n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1="Minijava.srand" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Exp()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=";" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new Srand(n0,n2,n4,n5,n7); }
}

Rand Rand() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1="Minijava.rand" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Identifier()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=";" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new Rand(n0,n2,n4,n5,n7); }
}

Window Window() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Exp n4;
   NodeToken n5;
   Token n6;
   Exp n7;
   NodeToken n8;
   Token n9;
   Exp n10;
   NodeToken n11;
   Token n12;
   Exp n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;

   
}
{
   n1="Minijava.window" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Exp()
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Exp()
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=Exp()
   n12="," { n11 = JTBToolkit.makeNodeToken(n12); }
   n13=Exp()
   n15=")" { n14 = JTBToolkit.makeNodeToken(n15); }
   n17=";" { n16 = JTBToolkit.makeNodeToken(n17); }
   
   { return new Window(n0,n2,n4,n5,n7,n8,n10,n11,n13,n14,n16); }
}

Wait Wait() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Exp n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1="Minijava.wait" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Exp()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=";" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new Wait(n0,n2,n4,n5,n7); }
}

GetKeyState GetKeyState() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Exp n4;
   NodeToken n5;
   Token n6;
   Identifier n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;

   
}
{
   n1="Minijava.getkey" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Exp()
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Identifier()
   n9=")" { n8 = JTBToolkit.makeNodeToken(n9); }
   n11=";" { n10 = JTBToolkit.makeNodeToken(n11); }
   
   { return new GetKeyState(n0,n2,n4,n5,n7,n8,n10); }
}

Color Color() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Exp n4;
   NodeToken n5;
   Token n6;
   Exp n7;
   NodeToken n8;
   Token n9;
   Exp n10;
   NodeToken n11;
   Token n12;
   Exp n13;
   NodeToken n14;
   Token n15;
   Identifier n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;

   
}
{
   n1="Minijava.color" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Exp()
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Exp()
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=Exp()
   n12="," { n11 = JTBToolkit.makeNodeToken(n12); }
   n13=Exp()
   n15="," { n14 = JTBToolkit.makeNodeToken(n15); }
   n16=Identifier()
   n18=")" { n17 = JTBToolkit.makeNodeToken(n18); }
   n20=";" { n19 = JTBToolkit.makeNodeToken(n20); }
   
   { return new Color(n0,n2,n4,n5,n7,n8,n10,n11,n13,n14,n16,n17,n19); }
}

Bitblt Bitblt() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Exp n4;
   NodeToken n5;
   Token n6;
   Exp n7;
   NodeToken n8;
   Token n9;
   Exp n10;
   NodeToken n11;
   Token n12;
   Exp n13;
   NodeToken n14;
   Token n15;
   Exp n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;

   
}
{
   n1="Minijava.bitblt" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Exp()
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Exp()
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=Exp()
   n12="," { n11 = JTBToolkit.makeNodeToken(n12); }
   n13=Exp()
   n15="," { n14 = JTBToolkit.makeNodeToken(n15); }
   n16=Exp()
   n18=")" { n17 = JTBToolkit.makeNodeToken(n18); }
   n20=";" { n19 = JTBToolkit.makeNodeToken(n20); }
   
   { return new Bitblt(n0,n2,n4,n5,n7,n8,n10,n11,n13,n14,n16,n17,n19); }
}

Exp Exp() :
{
   NodeChoice n0;
   AndExpression n1;
   OrExpression n2;
   CompareExpression n3;
   PlusExpression n4;
   MinusExpression n5;
   TimesExpression n6;
   DivExpression n7;
   ModExpression n8;
   CompareBigExpression n9;
   CompareEquExpression n10;
   CompareNotEquExpression n11;
   CompareBigEquExpression n12;
   CompareSmallEquExpression n13;
   ArrayLookup n14;
   ArrayLength n15;
   MessageSend n16;
   PrimaryExpression n17;

   
}
{
   (
      LOOKAHEAD(PrimaryExpression() "&&")
      n1=AndExpression()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(PrimaryExpression() "||")
      n2=OrExpression()
      { n0 = new NodeChoice(n2, 1); }
   |
      LOOKAHEAD(PrimaryExpression() "<")
      n3=CompareExpression()
      { n0 = new NodeChoice(n3, 2); }
   |
      LOOKAHEAD(PrimaryExpression() "+")
      n4=PlusExpression()
      { n0 = new NodeChoice(n4, 3); }
   |
      LOOKAHEAD(PrimaryExpression() "-")
      n5=MinusExpression()
      { n0 = new NodeChoice(n5, 4); }
   |
      LOOKAHEAD(PrimaryExpression() "*")
      n6=TimesExpression()
      { n0 = new NodeChoice(n6, 5); }
   |
      LOOKAHEAD(PrimaryExpression() "/")
      n7=DivExpression()
      { n0 = new NodeChoice(n7, 6); }
   |
      LOOKAHEAD(PrimaryExpression() "%")
      n8=ModExpression()
      { n0 = new NodeChoice(n8, 7); }
   |
      LOOKAHEAD(PrimaryExpression() ">")
      n9=CompareBigExpression()
      { n0 = new NodeChoice(n9, 8); }
   |
      LOOKAHEAD(PrimaryExpression() "==")
      n10=CompareEquExpression()
      { n0 = new NodeChoice(n10, 9); }
   |
      LOOKAHEAD(PrimaryExpression() "!=")
      n11=CompareNotEquExpression()
      { n0 = new NodeChoice(n11, 10); }
   |
      LOOKAHEAD(PrimaryExpression() ">=")
      n12=CompareBigEquExpression()
      { n0 = new NodeChoice(n12, 11); }
   |
      LOOKAHEAD(PrimaryExpression() "<=")
      n13=CompareSmallEquExpression()
      { n0 = new NodeChoice(n13, 12); }
   |
      LOOKAHEAD(PrimaryExpression() "[")
      n14=ArrayLookup()
      { n0 = new NodeChoice(n14, 13); }
   |
      LOOKAHEAD(PrimaryExpression() "." "length")
      n15=ArrayLength()
      { n0 = new NodeChoice(n15, 14); }
   |
      LOOKAHEAD(PrimaryExpression() "." Identifier() "(")
      n16=MessageSend()
      { n0 = new NodeChoice(n16, 15); }
   |
      n17=PrimaryExpression()
      { n0 = new NodeChoice(n17, 16); }
   )
   
   { return new Exp(n0); }
}

DivExpression DivExpression() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;

   
}
{
   n0=PrimaryExpression()
   n2="/" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=PrimaryExpression()
   
   { return new DivExpression(n0,n1,n3); }
}

ModExpression ModExpression() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;

   
}
{
   n0=PrimaryExpression()
   n2="%" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=PrimaryExpression()
   
   { return new ModExpression(n0,n1,n3); }
}

CompareBigExpression CompareBigExpression() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;

   
}
{
   n0=PrimaryExpression()
   n2=">" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=PrimaryExpression()
   
   { return new CompareBigExpression(n0,n1,n3); }
}

CompareEquExpression CompareEquExpression() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;

   
}
{
   n0=PrimaryExpression()
   n2="==" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=PrimaryExpression()
   
   { return new CompareEquExpression(n0,n1,n3); }
}

CompareNotEquExpression CompareNotEquExpression() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;

   
}
{
   n0=PrimaryExpression()
   n2="!=" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=PrimaryExpression()
   
   { return new CompareNotEquExpression(n0,n1,n3); }
}

CompareBigEquExpression CompareBigEquExpression() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;

   
}
{
   n0=PrimaryExpression()
   n2=">=" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=PrimaryExpression()
   
   { return new CompareBigEquExpression(n0,n1,n3); }
}

CompareSmallEquExpression CompareSmallEquExpression() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;

   
}
{
   n0=PrimaryExpression()
   n2="<=" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=PrimaryExpression()
   
   { return new CompareSmallEquExpression(n0,n1,n3); }
}

OrExpression OrExpression() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;

   
}
{
   n0=PrimaryExpression()
   n2="||" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=PrimaryExpression()
   
   { return new OrExpression(n0,n1,n3); }
}

AndExpression AndExpression() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;

   
}
{
   n0=PrimaryExpression()
   n2="&&" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=PrimaryExpression()
   
   { return new AndExpression(n0,n1,n3); }
}

CompareExpression CompareExpression() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;

   
}
{
   n0=PrimaryExpression()
   n2="<" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=PrimaryExpression()
   
   { return new CompareExpression(n0,n1,n3); }
}

PlusExpression PlusExpression() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;

   
}
{
   n0=PrimaryExpression()
   n2="+" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=PrimaryExpression()
   
   { return new PlusExpression(n0,n1,n3); }
}

MinusExpression MinusExpression() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;

   
}
{
   n0=PrimaryExpression()
   n2="-" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=PrimaryExpression()
   
   { return new MinusExpression(n0,n1,n3); }
}

TimesExpression TimesExpression() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;

   
}
{
   n0=PrimaryExpression()
   n2="*" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=PrimaryExpression()
   
   { return new TimesExpression(n0,n1,n3); }
}

ArrayLookup ArrayLookup() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   PrimaryExpression n3;
   NodeToken n4;
   Token n5;

   
}
{
   n0=PrimaryExpression()
   n2="[" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=PrimaryExpression()
   n5="]" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new ArrayLookup(n0,n1,n3,n4); }
}

ArrayLength ArrayLength() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
   n0=PrimaryExpression()
   n2="." { n1 = JTBToolkit.makeNodeToken(n2); }
   n4="length" { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new ArrayLength(n0,n1,n3); }
}

MessageSend MessageSend() :
{
   PrimaryExpression n0;
   NodeToken n1;
   Token n2;
   Identifier n3;
   NodeToken n4;
   Token n5;
   NodeOptional n6 = new NodeOptional();
   ExpList n7;
   NodeToken n8;
   Token n9;

   
}
{
   n0=PrimaryExpression()
   n2="." { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Identifier()
   n5="(" { n4 = JTBToolkit.makeNodeToken(n5); }
   (
      n7=ExpList()
      { n6.addNode(n7); }
   )?
   n9=")" { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new MessageSend(n0,n1,n3,n4,n6,n8); }
}

ExpList ExpList() :
{
   Exp n0;
   NodeListOptional n1 = new NodeListOptional();
   ExpRest n2;

   
}
{
   n0=Exp()
   (
      n2=ExpRest()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ExpList(n0,n1); }
}

ExpRest ExpRest() :
{
   NodeToken n0;
   Token n1;
   Exp n2;

   
}
{
   n1="," { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Exp()
   
   { return new ExpRest(n0,n2); }
}

PrimaryExpression PrimaryExpression() :
{
   NodeChoice n0;
   IntegerLiteral n1;
   TrueLiteral n2;
   FalseLiteral n3;
   Identifier n4;
   ThisExpression n5;
   ArrayAllocationExpression n6;
   AllocationExpression n7;
   NotExpression n8;
   BracketExpression n9;
   CharLiteral n10;

   
}
{
   (
      n1=IntegerLiteral()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=TrueLiteral()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=FalseLiteral()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=Identifier()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=ThisExpression()
      { n0 = new NodeChoice(n5, 4); }
   |
      LOOKAHEAD(3)
      n6=ArrayAllocationExpression()
      { n0 = new NodeChoice(n6, 5); }
   |
      n7=AllocationExpression()
      { n0 = new NodeChoice(n7, 6); }
   |
      n8=NotExpression()
      { n0 = new NodeChoice(n8, 7); }
   |
      n9=BracketExpression()
      { n0 = new NodeChoice(n9, 8); }
   |
      n10=CharLiteral()
      { n0 = new NodeChoice(n10, 9); }
   )
   
   { return new PrimaryExpression(n0); }
}

IntegerLiteral IntegerLiteral() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<INTEGER_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new IntegerLiteral(n0); }
}

CharLiteral CharLiteral() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<CHAR_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new CharLiteral(n0); }
}

TrueLiteral TrueLiteral() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="true" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new TrueLiteral(n0); }
}

FalseLiteral FalseLiteral() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="false" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new FalseLiteral(n0); }
}

Identifier Identifier() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Identifier(n0); }
}

ThisExpression ThisExpression() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="this" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new ThisExpression(n0); }
}

ArrayAllocationExpression ArrayAllocationExpression() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Exp n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1="new" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="int" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="[" { n4 = JTBToolkit.makeNodeToken(n5); }
   n6=Exp()
   n8="]" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new ArrayAllocationExpression(n0,n2,n4,n6,n7); }
}

AllocationExpression AllocationExpression() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1="new" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   n4="(" { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new AllocationExpression(n0,n2,n3,n5); }
}

NotExpression NotExpression() :
{
   NodeToken n0;
   Token n1;
   Exp n2;

   
}
{
   n1="!" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Exp()
   
   { return new NotExpression(n0,n2); }
}

BracketExpression BracketExpression() :
{
   NodeToken n0;
   Token n1;
   Exp n2;
   NodeToken n3;
   Token n4;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Exp()
   n4=")" { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new BracketExpression(n0,n2,n3); }
}
